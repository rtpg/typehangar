# Stubs for django.http.response (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
import six

class BadHeaderError(ValueError): ...

class HttpResponseBase(six.Iterator):
    status_code = ...  # type: int
    cookies = ...  # type: Any
    closed = ...  # type: bool
    def __init__(self, content_type: Optional[Any] = ..., status: Optional[Any] = ..., reason: Optional[Any] = ..., charset: Optional[Any] = ...) -> None: ...
    @property
    def reason_phrase(self): ...
    @reason_phrase.setter
    def reason_phrase(self, value): ...
    @property
    def charset(self): ...
    @charset.setter
    def charset(self, value): ...
    def serialize_headers(self): ...
    __bytes__ = ...  # type: Any
    def __setitem__(self, header, value): ...
    def __delitem__(self, header): ...
    def __getitem__(self, header): ...
    def has_header(self, header): ...
    __contains__ = ...  # type: Any
    def items(self): ...
    def get(self, header, alternate: Optional[Any] = ...): ...
    def set_cookie(self, key, value: str = ..., max_age: Optional[Any] = ..., expires: Optional[Any] = ..., path: str = ..., domain: Optional[Any] = ..., secure: bool = ..., httponly: bool = ...): ...
    def setdefault(self, key, value): ...
    def set_signed_cookie(self, key, value, salt: str = ..., **kwargs): ...
    def delete_cookie(self, key, path: str = ..., domain: Optional[Any] = ...): ...
    def make_bytes(self, value): ...
    def close(self): ...
    def write(self, content): ...
    def flush(self): ...
    def tell(self): ...
    def writable(self): ...
    def writelines(self, lines): ...

class HttpResponse(HttpResponseBase):
    streaming = ...  # type: bool
    content = ...  # type: Any
    def __init__(self, content: bytes = ..., *args, **kwargs) -> None: ...
    def serialize(self): ...
    __bytes__ = ...  # type: Any
    @property
    def content(self): ...
    @content.setter
    def content(self, value): ...
    def __iter__(self): ...
    def write(self, content): ...
    def tell(self): ...
    def getvalue(self): ...
    def writable(self): ...
    def writelines(self, lines): ...

class StreamingHttpResponse(HttpResponseBase):
    streaming = ...  # type: bool
    streaming_content = ...  # type: Any
    def __init__(self, streaming_content: Any = ..., *args, **kwargs) -> None: ...
    @property
    def content(self): ...
    @property
    def streaming_content(self): ...
    @streaming_content.setter
    def streaming_content(self, value): ...
    def __iter__(self): ...
    def getvalue(self): ...

class FileResponse(StreamingHttpResponse):
    block_size = ...  # type: int

class HttpResponseRedirectBase(HttpResponse):
    allowed_schemes = ...  # type: Any
    def __init__(self, redirect_to, *args, **kwargs) -> None: ...
    url = ...  # type: Any

class HttpResponseRedirect(HttpResponseRedirectBase):
    status_code = ...  # type: int

class HttpResponsePermanentRedirect(HttpResponseRedirectBase):
    status_code = ...  # type: int

class HttpResponseNotModified(HttpResponse):
    status_code = ...  # type: int
    def __init__(self, *args, **kwargs) -> None: ...
    def content(self, value): ...

class HttpResponseBadRequest(HttpResponse):
    status_code = ...  # type: int

class HttpResponseNotFound(HttpResponse):
    status_code = ...  # type: int

class HttpResponseForbidden(HttpResponse):
    status_code = ...  # type: int

class HttpResponseNotAllowed(HttpResponse):
    status_code = ...  # type: int
    def __init__(self, permitted_methods, *args, **kwargs) -> None: ...

class HttpResponseGone(HttpResponse):
    status_code = ...  # type: int

class HttpResponseServerError(HttpResponse):
    status_code = ...  # type: int

class Http404(Exception): ...

class JsonResponse(HttpResponse):
    def __init__(self, data, encoder: Any = ..., safe: bool = ..., json_dumps_params: Optional[Any] = ..., **kwargs) -> None: ...
