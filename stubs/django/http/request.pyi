# Stubs for django.http.request (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from django.utils.datastructures import MultiValueDict

RAISE_ERROR = ...  # type: Any
host_validation_re = ...  # type: Any

class UnreadablePostError(IOError): ...
class RawPostDataException(Exception): ...

class HttpRequest:
    GET = ...  # type: Any
    POST = ...  # type: Any
    COOKIES = ...  # type: Any
    META = ...  # type: Any
    FILES = ...  # type: Any
    path = ...  # type: str
    path_info = ...  # type: str
    method = ...  # type: Any
    resolver_match = ...  # type: Any
    def __init__(self) -> None: ...
    def get_host(self): ...
    def get_port(self): ...
    def get_full_path(self, force_append_slash: bool = ...): ...
    def get_signed_cookie(self, key, default: Any = ..., salt: str = ..., max_age: Optional[Any] = ...): ...
    def get_raw_uri(self): ...
    def build_absolute_uri(self, location: Optional[Any] = ...): ...
    @property
    def scheme(self): ...
    def is_secure(self): ...
    def is_ajax(self): ...
    @property
    def encoding(self): ...
    @encoding.setter
    def encoding(self, val): ...
    @property
    def upload_handlers(self): ...
    @upload_handlers.setter
    def upload_handlers(self, upload_handlers): ...
    upload_handlers = ...  # type: Any
    def parse_file_upload(self, META, post_data): ...
    @property
    def body(self): ...
    def close(self): ...
    def read(self, *args, **kwargs): ...
    def readline(self, *args, **kwargs): ...
    def xreadlines(self): ...
    __iter__ = ...  # type: Any
    def readlines(self): ...

class QueryDict(MultiValueDict):
    encoding = ...  # type: Any
    def __init__(self, query_string: Optional[Any] = ..., mutable: bool = ..., encoding: Optional[Any] = ...) -> None: ...
    @property
    def encoding(self): ...
    @encoding.setter
    def encoding(self, value): ...
    def __setitem__(self, key, value): ...
    def __delitem__(self, key): ...
    def __copy__(self): ...
    def __deepcopy__(self, memo): ...
    def setlist(self, key, list_): ...
    def setlistdefault(self, key, default_list: Optional[Any] = ...): ...
    def appendlist(self, key, value): ...
    def pop(self, key, *args): ...
    def popitem(self): ...
    def clear(self): ...
    def setdefault(self, key, default: Optional[Any] = ...): ...
    def copy(self): ...
    def urlencode(self, safe: Optional[Any] = ...): ...

def bytes_to_text(s, encoding): ...
def split_domain_port(host): ...
def validate_host(host, allowed_hosts): ...
