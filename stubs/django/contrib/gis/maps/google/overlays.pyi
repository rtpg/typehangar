# Stubs for django.contrib.gis.maps.google.overlays (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class GEvent:
    event = ...  # type: Any
    action = ...  # type: Any
    def __init__(self, event, action) -> None: ...

class GOverlayBase:
    events = ...  # type: Any
    def __init__(self) -> None: ...
    def latlng_from_coords(self, coords): ...
    def add_event(self, event): ...

class GPolygon(GOverlayBase):
    envelope = ...  # type: Any
    points = ...  # type: Any
    def __init__(self, poly, stroke_color: str = ..., stroke_weight: int = ..., stroke_opacity: int = ..., fill_color: str = ..., fill_opacity: float = ...) -> None: ...
    @property
    def js_params(self): ...

class GPolyline(GOverlayBase):
    latlngs = ...  # type: Any
    envelope = ...  # type: Any
    def __init__(self, geom, color: str = ..., weight: int = ..., opacity: int = ...) -> None: ...
    @property
    def js_params(self): ...

class GIcon:
    varname = ...  # type: Any
    image = ...  # type: Any
    iconsize = ...  # type: Any
    shadow = ...  # type: Any
    shadowsize = ...  # type: Any
    iconanchor = ...  # type: Any
    infowindowanchor = ...  # type: Any
    def __init__(self, varname, image: Optional[Any] = ..., iconsize: Optional[Any] = ..., shadow: Optional[Any] = ..., shadowsize: Optional[Any] = ..., iconanchor: Optional[Any] = ..., infowindowanchor: Optional[Any] = ...) -> None: ...
    def __eq__(self, other): ...
    def __lt__(self, other): ...
    def __hash__(self): ...

class GMarker(GOverlayBase):
    latlng = ...  # type: Any
    envelope = ...  # type: Any
    title = ...  # type: Any
    draggable = ...  # type: Any
    icon = ...  # type: Any
    def __init__(self, geom, title: Optional[Any] = ..., draggable: bool = ..., icon: Optional[Any] = ...) -> None: ...
    def latlng_from_coords(self, coords): ...
    def options(self): ...
    @property
    def js_params(self): ...
