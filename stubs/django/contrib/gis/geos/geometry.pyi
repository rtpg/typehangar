# Stubs for django.contrib.gis.geos.geometry (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from django.contrib.gis.geos import prototypes as capi
from django.contrib.gis.geos.base import GEOSBase
from django.contrib.gis.geos.mutable_list import ListMixin

class GEOSGeometry(GEOSBase, ListMixin):
    ptr_type = ...  # type: Any
    has_cs = ...  # type: bool
    ptr = ...  # type: Any
    def __init__(self, geo_input, srid: Optional[Any] = ...) -> None: ...
    def __del__(self): ...
    def __copy__(self): ...
    def __deepcopy__(self, memodict): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __or__(self, other): ...
    def __and__(self, other): ...
    def __sub__(self, other): ...
    def __xor__(self, other): ...
    @property
    def coord_seq(self): ...
    @property
    def geom_type(self): ...
    @property
    def geom_typeid(self): ...
    @property
    def num_geom(self): ...
    @property
    def num_coords(self): ...
    @property
    def num_points(self): ...
    @property
    def dims(self): ...
    def normalize(self): ...
    @property
    def empty(self): ...
    @property
    def hasz(self): ...
    @property
    def ring(self): ...
    @property
    def simple(self): ...
    @property
    def valid(self): ...
    @property
    def valid_reason(self): ...
    def contains(self, other): ...
    def crosses(self, other): ...
    def disjoint(self, other): ...
    def equals(self, other): ...
    def equals_exact(self, other, tolerance: int = ...): ...
    def intersects(self, other): ...
    def overlaps(self, other): ...
    def relate_pattern(self, other, pattern): ...
    def touches(self, other): ...
    def within(self, other): ...
    def get_srid(self): ...
    def set_srid(self, srid): ...
    srid = ...  # type: Any
    @property
    def ewkt(self): ...
    @property
    def wkt(self): ...
    @property
    def hex(self): ...
    @property
    def hexewkb(self): ...
    @property
    def json(self): ...
    geojson = ...  # type: Any
    @property
    def wkb(self): ...
    @property
    def ewkb(self): ...
    @property
    def kml(self): ...
    @property
    def prepared(self): ...
    @property
    def ogr(self): ...
    @property
    def srs(self): ...
    @property
    def crs(self): ...
    def transform(self, ct, clone: bool = ...): ...
    @property
    def boundary(self): ...
    def buffer(self, width, quadsegs: int = ...): ...
    @property
    def centroid(self): ...
    @property
    def convex_hull(self): ...
    def difference(self, other): ...
    @property
    def envelope(self): ...
    def intersection(self, other): ...
    @property
    def point_on_surface(self): ...
    def relate(self, other): ...
    def simplify(self, tolerance: float = ..., preserve_topology: bool = ...): ...
    def sym_difference(self, other): ...
    def union(self, other): ...
    @property
    def area(self): ...
    def distance(self, other): ...
    @property
    def extent(self): ...
    @property
    def length(self): ...
    def clone(self): ...

class ProjectInterpolateMixin:
    def interpolate(self, distance): ...
    def interpolate_normalized(self, distance): ...
    def project(self, point): ...
    def project_normalized(self, point): ...
