# Stubs for django.contrib.auth.hashers (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from django.utils.translation import ugettext_noop as _

UNUSABLE_PASSWORD_PREFIX = ...  # type: str
UNUSABLE_PASSWORD_SUFFIX_LENGTH = ...  # type: int

def is_password_usable(encoded): ...
def check_password(password, encoded, setter: Optional[Any] = ..., preferred: str = ...): ...
def make_password(password, salt: Optional[Any] = ..., hasher: str = ...): ...
def get_hashers(): ...
def get_hashers_by_algorithm(): ...
def reset_hashers(**kwargs): ...
def get_hasher(algorithm: str = ...): ...
def identify_hasher(encoded): ...
def mask_hash(hash, show: int = ..., char: str = ...): ...

class BasePasswordHasher:
    algorithm = ...  # type: Any
    library = ...  # type: Any
    def salt(self): ...
    def verify(self, password, encoded): ...
    def encode(self, password, salt): ...
    def safe_summary(self, encoded): ...
    def must_update(self, encoded): ...
    def harden_runtime(self, password, encoded): ...

class PBKDF2PasswordHasher(BasePasswordHasher):
    algorithm = ...  # type: str
    iterations = ...  # type: int
    digest = ...  # type: Any
    def encode(self, password, salt, iterations: Optional[Any] = ...): ...
    def verify(self, password, encoded): ...
    def safe_summary(self, encoded): ...
    def must_update(self, encoded): ...
    def harden_runtime(self, password, encoded): ...

class PBKDF2SHA1PasswordHasher(PBKDF2PasswordHasher):
    algorithm = ...  # type: str
    digest = ...  # type: Any

class BCryptSHA256PasswordHasher(BasePasswordHasher):
    algorithm = ...  # type: str
    digest = ...  # type: Any
    library = ...  # type: Any
    rounds = ...  # type: int
    def salt(self): ...
    def encode(self, password, salt): ...
    def verify(self, password, encoded): ...
    def safe_summary(self, encoded): ...
    def must_update(self, encoded): ...
    def harden_runtime(self, password, encoded): ...

class BCryptPasswordHasher(BCryptSHA256PasswordHasher):
    algorithm = ...  # type: str
    digest = ...  # type: Any

class SHA1PasswordHasher(BasePasswordHasher):
    algorithm = ...  # type: str
    def encode(self, password, salt): ...
    def verify(self, password, encoded): ...
    def safe_summary(self, encoded): ...
    def harden_runtime(self, password, encoded): ...

class MD5PasswordHasher(BasePasswordHasher):
    algorithm = ...  # type: str
    def encode(self, password, salt): ...
    def verify(self, password, encoded): ...
    def safe_summary(self, encoded): ...
    def harden_runtime(self, password, encoded): ...

class UnsaltedSHA1PasswordHasher(BasePasswordHasher):
    algorithm = ...  # type: str
    def salt(self): ...
    def encode(self, password, salt): ...
    def verify(self, password, encoded): ...
    def safe_summary(self, encoded): ...
    def harden_runtime(self, password, encoded): ...

class UnsaltedMD5PasswordHasher(BasePasswordHasher):
    algorithm = ...  # type: str
    def salt(self): ...
    def encode(self, password, salt): ...
    def verify(self, password, encoded): ...
    def safe_summary(self, encoded): ...
    def harden_runtime(self, password, encoded): ...

class CryptPasswordHasher(BasePasswordHasher):
    algorithm = ...  # type: str
    library = ...  # type: str
    def salt(self): ...
    def encode(self, password, salt): ...
    def verify(self, password, encoded): ...
    def safe_summary(self, encoded): ...
    def harden_runtime(self, password, encoded): ...
