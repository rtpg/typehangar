# Stubs for django.contrib.admin.helpers (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
import forms
import forms.utils
from django.utils.translation import ugettext_lazy as _

ACTION_CHECKBOX_NAME = ...  # type: str

class ActionForm(forms.Form):
    action = ...  # type: Any
    select_across = ...  # type: Any

checkbox = ...  # type: Any

class AdminForm:
    prepopulated_fields = ...  # type: Any
    model_admin = ...  # type: Any
    readonly_fields = ...  # type: Any
    def __init__(self, form, fieldsets, prepopulated_fields, readonly_fields: Optional[Any] = ..., model_admin: Optional[Any] = ...) -> None: ...
    def __iter__(self): ...
    media = ...  # type: Any

class Fieldset:
    form = ...  # type: Any
    classes = ...  # type: Any
    description = ...  # type: Any
    model_admin = ...  # type: Any
    readonly_fields = ...  # type: Any
    def __init__(self, form, name: Optional[Any] = ..., readonly_fields: Any = ..., fields: Any = ..., classes: Any = ..., description: Optional[Any] = ..., model_admin: Optional[Any] = ...) -> None: ...
    media = ...  # type: Any
    def __iter__(self): ...

class Fieldline:
    form = ...  # type: Any
    fields = ...  # type: Any
    has_visible_field = ...  # type: Any
    model_admin = ...  # type: Any
    readonly_fields = ...  # type: Any
    def __init__(self, form, field, readonly_fields: Optional[Any] = ..., model_admin: Optional[Any] = ...) -> None: ...
    def __iter__(self): ...
    def errors(self): ...

class AdminField:
    field = ...  # type: Any
    is_first = ...  # type: Any
    is_checkbox = ...  # type: Any
    is_readonly = ...  # type: bool
    def __init__(self, form, field, is_first) -> None: ...
    def label_tag(self): ...
    def errors(self): ...

class AdminReadonlyField:
    field = ...  # type: Any
    form = ...  # type: Any
    model_admin = ...  # type: Any
    is_first = ...  # type: Any
    is_checkbox = ...  # type: bool
    is_readonly = ...  # type: bool
    empty_value_display = ...  # type: Any
    def __init__(self, form, field, is_first, model_admin: Optional[Any] = ...) -> None: ...
    def label_tag(self): ...
    def contents(self): ...

class InlineAdminFormSet:
    opts = ...  # type: Any
    formset = ...  # type: Any
    fieldsets = ...  # type: Any
    model_admin = ...  # type: Any
    readonly_fields = ...  # type: Any
    prepopulated_fields = ...  # type: Any
    def __init__(self, inline, formset, fieldsets, prepopulated_fields: Optional[Any] = ..., readonly_fields: Optional[Any] = ..., model_admin: Optional[Any] = ...) -> None: ...
    def __iter__(self): ...
    def fields(self): ...
    media = ...  # type: Any

class InlineAdminForm(AdminForm):
    formset = ...  # type: Any
    model_admin = ...  # type: Any
    original = ...  # type: Any
    show_url = ...  # type: Any
    absolute_url = ...  # type: Any
    def __init__(self, formset, form, fieldsets, prepopulated_fields, original, readonly_fields: Optional[Any] = ..., model_admin: Optional[Any] = ..., view_on_site_url: Optional[Any] = ...) -> None: ...
    def original_content_type_id(self): ...
    def __iter__(self): ...
    def needs_explicit_pk_field(self): ...
    def pk_field(self): ...
    def fk_field(self): ...
    def deletion_field(self): ...
    def ordering_field(self): ...

class InlineFieldset(Fieldset):
    formset = ...  # type: Any
    def __init__(self, formset, *args, **kwargs) -> None: ...
    def __iter__(self): ...

class AdminErrorList(forms.utils.ErrorList):
    def __init__(self, form, inline_formsets) -> None: ...
