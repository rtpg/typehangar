# Stubs for django.contrib.admin.filters (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any
from django.utils.translation import ugettext_lazy as _

class ListFilter:
    title = ...  # type: Any
    template = ...  # type: str
    used_parameters = ...  # type: Any
    def __init__(self, request, params, model, model_admin) -> None: ...
    def has_output(self): ...
    def choices(self, cl): ...
    def queryset(self, request, queryset): ...
    def expected_parameters(self): ...

class SimpleListFilter(ListFilter):
    parameter_name = ...  # type: Any
    lookup_choices = ...  # type: Any
    def __init__(self, request, params, model, model_admin) -> None: ...
    def has_output(self): ...
    def value(self): ...
    def lookups(self, request, model_admin): ...
    def expected_parameters(self): ...
    def choices(self, cl): ...

class FieldListFilter(ListFilter):
    field = ...  # type: Any
    field_path = ...  # type: Any
    title = ...  # type: Any
    def __init__(self, field, request, params, model, model_admin, field_path) -> None: ...
    def has_output(self): ...
    def queryset(self, request, queryset): ...
    @classmethod
    def register(cls, test, list_filter_class, take_priority: bool = ...): ...
    @classmethod
    def create(cls, field, request, params, model, model_admin, field_path): ...

class RelatedFieldListFilter(FieldListFilter):
    lookup_kwarg = ...  # type: Any
    lookup_kwarg_isnull = ...  # type: Any
    lookup_val = ...  # type: Any
    lookup_val_isnull = ...  # type: Any
    lookup_choices = ...  # type: Any
    lookup_title = ...  # type: Any
    title = ...  # type: Any
    empty_value_display = ...  # type: Any
    def __init__(self, field, request, params, model, model_admin, field_path) -> None: ...
    @property
    def include_empty_choice(self): ...
    def has_output(self): ...
    def expected_parameters(self): ...
    def field_choices(self, field, request, model_admin): ...
    def choices(self, cl): ...

class BooleanFieldListFilter(FieldListFilter):
    lookup_kwarg = ...  # type: Any
    lookup_kwarg2 = ...  # type: Any
    lookup_val = ...  # type: Any
    lookup_val2 = ...  # type: Any
    def __init__(self, field, request, params, model, model_admin, field_path) -> None: ...
    def expected_parameters(self): ...
    def choices(self, cl): ...

class ChoicesFieldListFilter(FieldListFilter):
    lookup_kwarg = ...  # type: Any
    lookup_val = ...  # type: Any
    def __init__(self, field, request, params, model, model_admin, field_path) -> None: ...
    def expected_parameters(self): ...
    def choices(self, cl): ...

class DateFieldListFilter(FieldListFilter):
    field_generic = ...  # type: Any
    date_params = ...  # type: Any
    lookup_kwarg_since = ...  # type: Any
    lookup_kwarg_until = ...  # type: Any
    links = ...  # type: Any
    def __init__(self, field, request, params, model, model_admin, field_path) -> None: ...
    def expected_parameters(self): ...
    def choices(self, cl): ...

class AllValuesFieldListFilter(FieldListFilter):
    lookup_kwarg = ...  # type: Any
    lookup_kwarg_isnull = ...  # type: Any
    lookup_val = ...  # type: Any
    lookup_val_isnull = ...  # type: Any
    empty_value_display = ...  # type: Any
    lookup_choices = ...  # type: Any
    def __init__(self, field, request, params, model, model_admin, field_path) -> None: ...
    def expected_parameters(self): ...
    def choices(self, cl): ...

class RelatedOnlyFieldListFilter(RelatedFieldListFilter):
    def field_choices(self, field, request, model_admin): ...
