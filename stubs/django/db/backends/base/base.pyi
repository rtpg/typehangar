# Stubs for django.db.backends.base.base (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from django.utils.six.moves import _thread as thread

pytz = ...  # type: Any
NO_DB_ALIAS = ...  # type: str

class BaseDatabaseWrapper:
    data_types = ...  # type: Any
    data_types_suffix = ...  # type: Any
    data_type_check_constraints = ...  # type: Any
    ops = ...  # type: Any
    vendor = ...  # type: str
    SchemaEditorClass = ...  # type: Any
    queries_limit = ...  # type: int
    connection = ...  # type: Any
    settings_dict = ...  # type: Any
    alias = ...  # type: Any
    queries_log = ...  # type: Any
    force_debug_cursor = ...  # type: bool
    autocommit = ...  # type: bool
    in_atomic_block = ...  # type: bool
    savepoint_state = ...  # type: int
    savepoint_ids = ...  # type: Any
    commit_on_exit = ...  # type: bool
    needs_rollback = ...  # type: bool
    close_at = ...  # type: Any
    closed_in_transaction = ...  # type: bool
    errors_occurred = ...  # type: bool
    allow_thread_sharing = ...  # type: Any
    run_on_commit = ...  # type: Any
    run_commit_hooks_on_set_autocommit_on = ...  # type: bool
    def __init__(self, settings_dict, alias: Any = ..., allow_thread_sharing: bool = ...) -> None: ...
    def timezone(self): ...
    def timezone_name(self): ...
    @property
    def queries_logged(self): ...
    @property
    def queries(self): ...
    def get_connection_params(self): ...
    def get_new_connection(self, conn_params): ...
    def init_connection_state(self): ...
    def create_cursor(self): ...
    def connect(self): ...
    def check_settings(self): ...
    def ensure_connection(self): ...
    def cursor(self): ...
    def commit(self): ...
    def rollback(self): ...
    def close(self): ...
    def savepoint(self): ...
    def savepoint_rollback(self, sid): ...
    def savepoint_commit(self, sid): ...
    def clean_savepoints(self): ...
    def get_autocommit(self): ...
    def set_autocommit(self, autocommit, force_begin_transaction_with_broken_autocommit: bool = ...): ...
    def get_rollback(self): ...
    def set_rollback(self, rollback): ...
    def validate_no_atomic_block(self): ...
    def validate_no_broken_transaction(self): ...
    def constraint_checks_disabled(self): ...
    def disable_constraint_checking(self): ...
    def enable_constraint_checking(self): ...
    def check_constraints(self, table_names: Optional[Any] = ...): ...
    def is_usable(self): ...
    def close_if_unusable_or_obsolete(self): ...
    def validate_thread_sharing(self): ...
    def prepare_database(self): ...
    def wrap_database_errors(self): ...
    def make_debug_cursor(self, cursor): ...
    def make_cursor(self, cursor): ...
    def temporary_connection(self): ...
    def schema_editor(self, *args, **kwargs): ...
    def on_commit(self, func): ...
    def run_and_clear_commit_hooks(self): ...
    def copy(self, alias: Optional[Any] = ..., allow_thread_sharing: Optional[Any] = ...): ...
