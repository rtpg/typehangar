# Stubs for django.db.backends.base.features (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class BaseDatabaseFeatures:
    gis_enabled = ...  # type: bool
    allows_group_by_pk = ...  # type: bool
    allows_group_by_selected_pks = ...  # type: bool
    empty_fetchmany_value = ...  # type: Any
    update_can_self_select = ...  # type: bool
    interprets_empty_strings_as_nulls = ...  # type: bool
    supports_nullable_unique_constraints = ...  # type: bool
    supports_partially_nullable_unique_constraints = ...  # type: bool
    can_use_chunked_reads = ...  # type: bool
    can_return_id_from_insert = ...  # type: bool
    has_bulk_insert = ...  # type: bool
    uses_savepoints = ...  # type: bool
    can_release_savepoints = ...  # type: bool
    can_combine_inserts_with_and_without_auto_increment_pk = ...  # type: bool
    related_fields_match_type = ...  # type: bool
    allow_sliced_subqueries = ...  # type: bool
    has_select_for_update = ...  # type: bool
    has_select_for_update_nowait = ...  # type: bool
    supports_select_related = ...  # type: bool
    test_db_allows_multiple_connections = ...  # type: bool
    supports_unspecified_pk = ...  # type: bool
    supports_forward_references = ...  # type: bool
    truncates_names = ...  # type: bool
    has_real_datatype = ...  # type: bool
    supports_subqueries_in_group_by = ...  # type: bool
    supports_bitwise_or = ...  # type: bool
    has_native_uuid_field = ...  # type: bool
    has_native_duration_field = ...  # type: bool
    driver_supports_timedelta_args = ...  # type: bool
    supports_microsecond_precision = ...  # type: bool
    supports_regex_backreferencing = ...  # type: bool
    supports_date_lookup_using_string = ...  # type: bool
    supports_timezones = ...  # type: bool
    has_zoneinfo_database = ...  # type: bool
    requires_explicit_null_ordering_when_grouping = ...  # type: bool
    nulls_order_largest = ...  # type: bool
    supports_1000_query_parameters = ...  # type: bool
    allows_auto_pk_0 = ...  # type: bool
    can_defer_constraint_checks = ...  # type: bool
    supports_mixed_date_datetime_comparisons = ...  # type: bool
    supports_tablespaces = ...  # type: bool
    supports_sequence_reset = ...  # type: bool
    can_introspect_max_length = ...  # type: bool
    can_introspect_null = ...  # type: bool
    can_introspect_default = ...  # type: bool
    can_introspect_foreign_keys = ...  # type: bool
    can_introspect_autofield = ...  # type: bool
    can_introspect_big_integer_field = ...  # type: bool
    can_introspect_binary_field = ...  # type: bool
    can_introspect_decimal_field = ...  # type: bool
    can_introspect_ip_address_field = ...  # type: bool
    can_introspect_positive_integer_field = ...  # type: bool
    can_introspect_small_integer_field = ...  # type: bool
    can_introspect_time_field = ...  # type: bool
    can_distinct_on_fields = ...  # type: bool
    autocommits_when_autocommit_is_off = ...  # type: bool
    atomic_transactions = ...  # type: bool
    can_rollback_ddl = ...  # type: bool
    supports_combined_alters = ...  # type: bool
    supports_foreign_keys = ...  # type: bool
    supports_column_check_constraints = ...  # type: bool
    supports_paramstyle_pyformat = ...  # type: bool
    requires_literal_defaults = ...  # type: bool
    connection_persists_old_columns = ...  # type: bool
    closed_cursor_error_class = ...  # type: Any
    has_case_insensitive_like = ...  # type: bool
    requires_sqlparse_for_splitting = ...  # type: bool
    bare_select_suffix = ...  # type: str
    implied_column_null = ...  # type: bool
    uppercases_column_names = ...  # type: bool
    supports_select_for_update_with_limit = ...  # type: bool
    greatest_least_ignores_nulls = ...  # type: bool
    can_clone_databases = ...  # type: bool
    connection = ...  # type: Any
    def __init__(self, connection) -> None: ...
    def supports_transactions(self): ...
    def supports_stddev(self): ...
    def introspected_boolean_field_type(self, field: Optional[Any] = ..., created_separately: bool = ...): ...
