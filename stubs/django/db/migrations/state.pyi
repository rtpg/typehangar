# Stubs for django.db.migrations.state (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from django.apps import AppConfig
from django.apps.registry import Apps, apps as global_apps
from .exceptions import InvalidBasesError as InvalidBasesError

def get_related_models_recursive(model): ...

class ProjectState:
    models = ...  # type: Any
    real_apps = ...  # type: Any
    def __init__(self, models: Optional[Any] = ..., real_apps: Optional[Any] = ...) -> None: ...
    def add_model(self, model_state): ...
    def remove_model(self, app_label, model_name): ...
    def reload_model(self, app_label, model_name): ...
    def clone(self): ...
    def apps(self): ...
    @property
    apps = ...  # type: Any
    def concrete_apps(self): ...
    @classmethod
    def from_apps(cls, apps): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

class AppConfigStub(AppConfig):
    path = ...  # type: str
    label = ...  # type: Any
    def __init__(self, label) -> None: ...
    models = ...  # type: Any
    def import_models(self, all_models): ...

class StateApps(Apps):
    real_models = ...  # type: Any
    def __init__(self, real_apps, models, ignore_swappable: bool = ...) -> None: ...
    ready = ...  # type: bool
    def bulk_update(self): ...
    def render_multiple(self, model_states): ...
    def clone(self): ...
    def register_model(self, app_label, model): ...
    def unregister_model(self, app_label, model_name): ...

class ModelState:
    app_label = ...  # type: Any
    name = ...  # type: Any
    fields = ...  # type: Any
    options = ...  # type: Any
    bases = ...  # type: Any
    managers = ...  # type: Any
    def __init__(self, app_label, name, fields, options: Optional[Any] = ..., bases: Optional[Any] = ..., managers: Optional[Any] = ...) -> None: ...
    def name_lower(self): ...
    @classmethod
    def from_model(cls, model, exclude_rels: bool = ...): ...
    @classmethod
    def force_text_recursive(cls, value): ...
    def construct_managers(self): ...
    def clone(self): ...
    def render(self, apps): ...
    def get_field_by_name(self, name): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
