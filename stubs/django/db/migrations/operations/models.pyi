# Stubs for django.db.migrations.operations.models (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from django.db.migrations.operations.base import Operation

class CreateModel(Operation):
    serialization_expand_args = ...  # type: Any
    name = ...  # type: Any
    fields = ...  # type: Any
    options = ...  # type: Any
    bases = ...  # type: Any
    managers = ...  # type: Any
    def __init__(self, name, fields, options: Optional[Any] = ..., bases: Optional[Any] = ..., managers: Optional[Any] = ...) -> None: ...
    def name_lower(self): ...
    def deconstruct(self): ...
    def state_forwards(self, app_label, state): ...
    def database_forwards(self, app_label, schema_editor, from_state, to_state): ...
    def database_backwards(self, app_label, schema_editor, from_state, to_state): ...
    def describe(self): ...
    def references_model(self, name, app_label: Optional[Any] = ...): ...

class DeleteModel(Operation):
    name = ...  # type: Any
    def __init__(self, name) -> None: ...
    def name_lower(self): ...
    def deconstruct(self): ...
    def state_forwards(self, app_label, state): ...
    def database_forwards(self, app_label, schema_editor, from_state, to_state): ...
    def database_backwards(self, app_label, schema_editor, from_state, to_state): ...
    def references_model(self, name, app_label: Optional[Any] = ...): ...
    def describe(self): ...

class RenameModel(Operation):
    old_name = ...  # type: Any
    new_name = ...  # type: Any
    def __init__(self, old_name, new_name) -> None: ...
    def old_name_lower(self): ...
    def new_name_lower(self): ...
    def deconstruct(self): ...
    def state_forwards(self, app_label, state): ...
    def database_forwards(self, app_label, schema_editor, from_state, to_state): ...
    def database_backwards(self, app_label, schema_editor, from_state, to_state): ...
    def references_model(self, name, app_label: Optional[Any] = ...): ...
    def describe(self): ...

class AlterModelTable(Operation):
    name = ...  # type: Any
    table = ...  # type: Any
    def __init__(self, name, table) -> None: ...
    def name_lower(self): ...
    def deconstruct(self): ...
    def state_forwards(self, app_label, state): ...
    def database_forwards(self, app_label, schema_editor, from_state, to_state): ...
    def database_backwards(self, app_label, schema_editor, from_state, to_state): ...
    def references_model(self, name, app_label: Optional[Any] = ...): ...
    def describe(self): ...

class AlterUniqueTogether(Operation):
    option_name = ...  # type: str
    name = ...  # type: Any
    unique_together = ...  # type: Any
    def __init__(self, name, unique_together) -> None: ...
    def name_lower(self): ...
    def deconstruct(self): ...
    def state_forwards(self, app_label, state): ...
    def database_forwards(self, app_label, schema_editor, from_state, to_state): ...
    def database_backwards(self, app_label, schema_editor, from_state, to_state): ...
    def references_model(self, name, app_label: Optional[Any] = ...): ...
    def references_field(self, model_name, name, app_label: Optional[Any] = ...): ...
    def describe(self): ...

class AlterIndexTogether(Operation):
    option_name = ...  # type: str
    name = ...  # type: Any
    index_together = ...  # type: Any
    def __init__(self, name, index_together) -> None: ...
    def name_lower(self): ...
    def deconstruct(self): ...
    def state_forwards(self, app_label, state): ...
    def database_forwards(self, app_label, schema_editor, from_state, to_state): ...
    def database_backwards(self, app_label, schema_editor, from_state, to_state): ...
    def references_model(self, name, app_label: Optional[Any] = ...): ...
    def references_field(self, model_name, name, app_label: Optional[Any] = ...): ...
    def describe(self): ...

class AlterOrderWithRespectTo(Operation):
    name = ...  # type: Any
    order_with_respect_to = ...  # type: Any
    def __init__(self, name, order_with_respect_to) -> None: ...
    def name_lower(self): ...
    def deconstruct(self): ...
    def state_forwards(self, app_label, state): ...
    def database_forwards(self, app_label, schema_editor, from_state, to_state): ...
    def database_backwards(self, app_label, schema_editor, from_state, to_state): ...
    def references_model(self, name, app_label: Optional[Any] = ...): ...
    def references_field(self, model_name, name, app_label: Optional[Any] = ...): ...
    def describe(self): ...

class AlterModelOptions(Operation):
    ALTER_OPTION_KEYS = ...  # type: Any
    name = ...  # type: Any
    options = ...  # type: Any
    def __init__(self, name, options) -> None: ...
    def name_lower(self): ...
    def deconstruct(self): ...
    def state_forwards(self, app_label, state): ...
    def database_forwards(self, app_label, schema_editor, from_state, to_state): ...
    def database_backwards(self, app_label, schema_editor, from_state, to_state): ...
    def references_model(self, name, app_label: Optional[Any] = ...): ...
    def describe(self): ...

class AlterModelManagers(Operation):
    serialization_expand_args = ...  # type: Any
    name = ...  # type: Any
    managers = ...  # type: Any
    def __init__(self, name, managers) -> None: ...
    def name_lower(self): ...
    def deconstruct(self): ...
    def state_forwards(self, app_label, state): ...
    def database_forwards(self, app_label, schema_editor, from_state, to_state): ...
    def database_backwards(self, app_label, schema_editor, from_state, to_state): ...
    def references_model(self, name, app_label: Optional[Any] = ...): ...
    def describe(self): ...
