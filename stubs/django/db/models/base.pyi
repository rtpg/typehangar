# Stubs for django.db.models.base (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from django.utils.translation import ugettext_lazy as _

def subclass_exception(name, parents, module, attached_to: Optional[Any] = ...): ...

class ModelBase(type):
    def __new__(cls, name, bases, attrs): ...
    def copy_managers(cls, base_managers): ...
    def add_to_class(cls, name, value): ...

class ModelState:
    db = ...  # type: Any
    adding = ...  # type: bool
    def __init__(self, db: Optional[Any] = ...) -> None: ...

class Model:
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def from_db(cls, db, field_names, values): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __hash__(self): ...
    def __reduce__(self): ...
    pk = ...  # type: Any
    def get_deferred_fields(self): ...
    def refresh_from_db(self, using: Optional[Any] = ..., fields: Optional[Any] = ..., **kwargs): ...
    def serializable_value(self, field_name): ...
    def save(self, force_insert: bool = ..., force_update: bool = ..., using: Optional[Any] = ..., update_fields: Optional[Any] = ...): ...
    def save_base(self, raw: bool = ..., force_insert: bool = ..., force_update: bool = ..., using: Optional[Any] = ..., update_fields: Optional[Any] = ...): ...
    def delete(self, using: Optional[Any] = ..., keep_parents: bool = ...): ...
    def prepare_database_save(self, field): ...
    def clean(self): ...
    def validate_unique(self, exclude: Optional[Any] = ...): ...
    def date_error_message(self, lookup_type, field_name, unique_for): ...
    def unique_error_message(self, model_class, unique_check): ...
    def full_clean(self, exclude: Optional[Any] = ..., validate_unique: bool = ...): ...
    def clean_fields(self, exclude: Optional[Any] = ...): ...
    @classmethod
    def check(cls, **kwargs): ...

def method_set_order(ordered_obj, self, id_list, using: Optional[Any] = ...): ...
def method_get_order(ordered_obj, self): ...
def make_foreign_order_accessors(model, related_model): ...
def simple_class_factory(model, attrs): ...
def model_unpickle(model_id, attrs, factory): ...
def unpickle_inner_exception(klass, exception_name): ...
