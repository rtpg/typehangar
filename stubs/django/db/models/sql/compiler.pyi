# Stubs for django.db.models.sql.compiler (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class SQLCompiler:
    query = ...  # type: Any
    connection = ...  # type: Any
    using = ...  # type: Any
    quote_cache = ...  # type: Any
    select = ...  # type: Any
    annotation_col_map = ...  # type: Any
    klass_info = ...  # type: Any
    ordering_parts = ...  # type: Any
    subquery = ...  # type: bool
    def __init__(self, query, connection, using) -> None: ...
    col_count = ...  # type: Any
    def setup_query(self): ...
    def pre_sql_setup(self): ...
    def get_group_by(self, select, order_by): ...
    def collapse_group_by(self, expressions, having): ...
    def get_select(self): ...
    def get_order_by(self): ...
    def get_extra_select(self, order_by, select): ...
    def __call__(self, name): ...
    def quote_name_unless_alias(self, name): ...
    def compile(self, node, select_format: bool = ...): ...
    def as_sql(self, with_limits: bool = ..., with_col_aliases: bool = ..., subquery: bool = ...): ...
    def as_nested_sql(self): ...
    def get_default_columns(self, start_alias: Optional[Any] = ..., opts: Optional[Any] = ..., from_parent: Optional[Any] = ...): ...
    def get_distinct(self): ...
    def find_ordering_name(self, name, opts, alias: Optional[Any] = ..., default_order: str = ..., already_seen: Optional[Any] = ...): ...
    def get_from_clause(self): ...
    def get_related_selections(self, select, opts: Optional[Any] = ..., root_alias: Optional[Any] = ..., cur_depth: int = ..., requested: Optional[Any] = ..., restricted: Optional[Any] = ...): ...
    def deferred_to_columns(self): ...
    def get_converters(self, expressions): ...
    def apply_converters(self, row, converters): ...
    def results_iter(self, results: Optional[Any] = ...): ...
    def has_results(self): ...
    def execute_sql(self, result_type: Any = ...): ...
    def as_subquery_condition(self, alias, columns, compiler): ...

class SQLInsertCompiler(SQLCompiler):
    return_id = ...  # type: bool
    def __init__(self, *args, **kwargs) -> None: ...
    def field_as_sql(self, field, val): ...
    def prepare_value(self, field, value): ...
    def pre_save_val(self, field, obj): ...
    def assemble_as_sql(self, fields, value_rows): ...
    def as_sql(self): ...
    def execute_sql(self, return_id: bool = ...): ...

class SQLDeleteCompiler(SQLCompiler):
    def as_sql(self): ...

class SQLUpdateCompiler(SQLCompiler):
    def as_sql(self): ...
    def execute_sql(self, result_type): ...
    def pre_sql_setup(self): ...

class SQLAggregateCompiler(SQLCompiler):
    col_count = ...  # type: Any
    def as_sql(self): ...

def cursor_iter(cursor, sentinel, col_count): ...
