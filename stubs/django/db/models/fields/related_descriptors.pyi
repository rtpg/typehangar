# Stubs for django.db.models.fields.related_descriptors (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class ForwardManyToOneDescriptor:
    field = ...  # type: Any
    cache_name = ...  # type: Any
    def __init__(self, field_with_rel) -> None: ...
    def RelatedObjectDoesNotExist(self): ...
    def is_cached(self, instance): ...
    def get_queryset(self, **hints): ...
    def get_prefetch_queryset(self, instances, queryset: Optional[Any] = ...): ...
    def __get__(self, instance, instance_type: Optional[Any] = ...): ...
    def __set__(self, instance, value): ...

class ReverseOneToOneDescriptor:
    related = ...  # type: Any
    cache_name = ...  # type: Any
    def __init__(self, related) -> None: ...
    def RelatedObjectDoesNotExist(self): ...
    def is_cached(self, instance): ...
    def get_queryset(self, **hints): ...
    def get_prefetch_queryset(self, instances, queryset: Optional[Any] = ...): ...
    def __get__(self, instance, instance_type: Optional[Any] = ...): ...
    def __set__(self, instance, value): ...

class ReverseManyToOneDescriptor:
    rel = ...  # type: Any
    field = ...  # type: Any
    def __init__(self, rel) -> None: ...
    def related_manager_cls(self): ...
    def __get__(self, instance, instance_type: Optional[Any] = ...): ...
    def __set__(self, instance, value): ...

def create_reverse_many_to_one_manager(superclass, rel): ...

class ManyToManyDescriptor(ReverseManyToOneDescriptor):
    reverse = ...  # type: Any
    def __init__(self, rel, reverse: bool = ...) -> None: ...
    @property
    def through(self): ...
    def related_manager_cls(self): ...

def create_forward_many_to_many_manager(superclass, rel, reverse): ...
