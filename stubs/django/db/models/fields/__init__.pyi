# Stubs for django.db.models.fields (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from django.core.exceptions import FieldDoesNotExist as FieldDoesNotExist
from django.db.models.query_utils import RegisterLookupMixin
from django.utils.translation import ugettext_lazy as _

class Empty: ...
class NOT_PROVIDED: ...

BLANK_CHOICE_DASH = ...  # type: Any

class Field(RegisterLookupMixin):
    empty_strings_allowed = ...  # type: bool
    empty_values = ...  # type: Any
    creation_counter = ...  # type: int
    auto_creation_counter = ...  # type: int
    default_validators = ...  # type: Any
    default_error_messages = ...  # type: Any
    system_check_deprecated_details = ...  # type: Any
    system_check_removed_details = ...  # type: Any
    hidden = ...  # type: bool
    many_to_many = ...  # type: Any
    many_to_one = ...  # type: Any
    one_to_many = ...  # type: Any
    one_to_one = ...  # type: Any
    related_model = ...  # type: Any
    description = ...  # type: Any
    name = ...  # type: Any
    verbose_name = ...  # type: Any
    primary_key = ...  # type: Any
    remote_field = ...  # type: Any
    is_relation = ...  # type: Any
    default = ...  # type: Any
    editable = ...  # type: Any
    serialize = ...  # type: Any
    unique_for_date = ...  # type: Any
    unique_for_month = ...  # type: Any
    unique_for_year = ...  # type: Any
    choices = ...  # type: Any
    help_text = ...  # type: Any
    db_index = ...  # type: Any
    db_column = ...  # type: Any
    db_tablespace = ...  # type: Any
    auto_created = ...  # type: Any
    error_messages = ...  # type: Any
    def __init__(self, verbose_name: Optional[Any] = ..., name: Optional[Any] = ..., primary_key: bool = ..., max_length: Optional[Any] = ..., unique: bool = ..., blank: bool = ..., null: bool = ..., db_index: bool = ..., rel: Optional[Any] = ..., default: Any = ..., editable: bool = ..., serialize: bool = ..., unique_for_date: Optional[Any] = ..., unique_for_month: Optional[Any] = ..., unique_for_year: Optional[Any] = ..., choices: Optional[Any] = ..., help_text: str = ..., db_column: Optional[Any] = ..., db_tablespace: Optional[Any] = ..., auto_created: bool = ..., validators: Any = ..., error_messages: Optional[Any] = ...) -> None: ...
    def check(self, **kwargs): ...
    @property
    def rel(self): ...
    def get_col(self, alias, output_field: Optional[Any] = ...): ...
    def cached_col(self): ...
    def select_format(self, compiler, sql, params): ...
    def deconstruct(self): ...
    def clone(self): ...
    def __eq__(self, other): ...
    def __lt__(self, other): ...
    def __hash__(self): ...
    def __deepcopy__(self, memodict): ...
    def __copy__(self): ...
    def __reduce__(self): ...
    def get_pk_value_on_save(self, instance): ...
    def to_python(self, value): ...
    def validators(self): ...
    def run_validators(self, value): ...
    def validate(self, value, model_instance): ...
    def clean(self, value, model_instance): ...
    def db_type(self, connection): ...
    def db_parameters(self, connection): ...
    def db_type_suffix(self, connection): ...
    def get_db_converters(self, connection): ...
    @property
    def unique(self): ...
    concrete = ...  # type: Any
    def set_attributes_from_name(self, name): ...
    model = ...  # type: Any
    def contribute_to_class(self, cls, name, virtual_only: bool = ...): ...
    def get_filter_kwargs_for_object(self, obj): ...
    def get_attname(self): ...
    def get_attname_column(self): ...
    def get_cache_name(self): ...
    def get_internal_type(self): ...
    def pre_save(self, model_instance, add): ...
    def get_prep_value(self, value): ...
    def get_db_prep_value(self, value, connection, prepared: bool = ...): ...
    def get_db_prep_save(self, value, connection): ...
    def get_prep_lookup(self, lookup_type, value): ...
    def get_db_prep_lookup(self, lookup_type, value, connection, prepared: bool = ...): ...
    def has_default(self): ...
    def get_default(self): ...
    def get_choices(self, include_blank: bool = ..., blank_choice: Any = ..., limit_choices_to: Optional[Any] = ...): ...
    def get_choices_default(self): ...
    def value_to_string(self, obj): ...
    flatchoices = ...  # type: Any
    def save_form_data(self, instance, data): ...
    def formfield(self, form_class: Optional[Any] = ..., choices_form_class: Optional[Any] = ..., **kwargs): ...
    def value_from_object(self, obj): ...

class AutoField(Field):
    description = ...  # type: Any
    empty_strings_allowed = ...  # type: bool
    default_error_messages = ...  # type: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def check(self, **kwargs): ...
    def deconstruct(self): ...
    def get_internal_type(self): ...
    def to_python(self, value): ...
    def validate(self, value, model_instance): ...
    def get_db_prep_value(self, value, connection, prepared: bool = ...): ...
    def get_prep_value(self, value): ...
    def contribute_to_class(self, cls, name, **kwargs): ...
    def formfield(self, **kwargs): ...

class BooleanField(Field):
    empty_strings_allowed = ...  # type: bool
    default_error_messages = ...  # type: Any
    description = ...  # type: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def check(self, **kwargs): ...
    def deconstruct(self): ...
    def get_internal_type(self): ...
    def to_python(self, value): ...
    def get_prep_lookup(self, lookup_type, value): ...
    def get_prep_value(self, value): ...
    def formfield(self, **kwargs): ...

class CharField(Field):
    description = ...  # type: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def check(self, **kwargs): ...
    def get_internal_type(self): ...
    def to_python(self, value): ...
    def get_prep_value(self, value): ...
    def formfield(self, **kwargs): ...

class CommaSeparatedIntegerField(CharField):
    default_validators = ...  # type: Any
    description = ...  # type: Any
    def formfield(self, **kwargs): ...

class DateTimeCheckMixin:
    def check(self, **kwargs): ...

class DateField(DateTimeCheckMixin, Field):
    empty_strings_allowed = ...  # type: bool
    default_error_messages = ...  # type: Any
    description = ...  # type: Any
    def __init__(self, verbose_name: Optional[Any] = ..., name: Optional[Any] = ..., auto_now: bool = ..., auto_now_add: bool = ..., **kwargs) -> None: ...
    def deconstruct(self): ...
    def get_internal_type(self): ...
    def to_python(self, value): ...
    def pre_save(self, model_instance, add): ...
    def contribute_to_class(self, cls, name, **kwargs): ...
    def get_prep_value(self, value): ...
    def get_db_prep_value(self, value, connection, prepared: bool = ...): ...
    def value_to_string(self, obj): ...
    def formfield(self, **kwargs): ...

class DateTimeField(DateField):
    empty_strings_allowed = ...  # type: bool
    default_error_messages = ...  # type: Any
    description = ...  # type: Any
    def get_internal_type(self): ...
    def to_python(self, value): ...
    def pre_save(self, model_instance, add): ...
    def get_prep_value(self, value): ...
    def get_db_prep_value(self, value, connection, prepared: bool = ...): ...
    def value_to_string(self, obj): ...
    def formfield(self, **kwargs): ...

class DecimalField(Field):
    empty_strings_allowed = ...  # type: bool
    default_error_messages = ...  # type: Any
    description = ...  # type: Any
    def __init__(self, verbose_name: Optional[Any] = ..., name: Optional[Any] = ..., max_digits: Optional[Any] = ..., decimal_places: Optional[Any] = ..., **kwargs) -> None: ...
    def check(self, **kwargs): ...
    def validators(self): ...
    def deconstruct(self): ...
    def get_internal_type(self): ...
    def to_python(self, value): ...
    def format_number(self, value): ...
    def get_db_prep_save(self, value, connection): ...
    def get_prep_value(self, value): ...
    def formfield(self, **kwargs): ...

class DurationField(Field):
    empty_strings_allowed = ...  # type: bool
    default_error_messages = ...  # type: Any
    description = ...  # type: Any
    def get_internal_type(self): ...
    def to_python(self, value): ...
    def get_db_prep_value(self, value, connection, prepared: bool = ...): ...
    def get_db_converters(self, connection): ...
    def value_to_string(self, obj): ...
    def formfield(self, **kwargs): ...

class EmailField(CharField):
    default_validators = ...  # type: Any
    description = ...  # type: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def deconstruct(self): ...
    def formfield(self, **kwargs): ...

class FilePathField(Field):
    description = ...  # type: Any
    def __init__(self, verbose_name: Optional[Any] = ..., name: Optional[Any] = ..., path: str = ..., match: Optional[Any] = ..., recursive: bool = ..., allow_files: bool = ..., allow_folders: bool = ..., **kwargs) -> None: ...
    def check(self, **kwargs): ...
    def deconstruct(self): ...
    def get_prep_value(self, value): ...
    def formfield(self, **kwargs): ...
    def get_internal_type(self): ...

class FloatField(Field):
    empty_strings_allowed = ...  # type: bool
    default_error_messages = ...  # type: Any
    description = ...  # type: Any
    def get_prep_value(self, value): ...
    def get_internal_type(self): ...
    def to_python(self, value): ...
    def formfield(self, **kwargs): ...

class IntegerField(Field):
    empty_strings_allowed = ...  # type: bool
    default_error_messages = ...  # type: Any
    description = ...  # type: Any
    def check(self, **kwargs): ...
    def validators(self): ...
    def get_prep_value(self, value): ...
    def get_prep_lookup(self, lookup_type, value): ...
    def get_internal_type(self): ...
    def to_python(self, value): ...
    def formfield(self, **kwargs): ...

class BigIntegerField(IntegerField):
    empty_strings_allowed = ...  # type: bool
    description = ...  # type: Any
    MAX_BIGINT = ...  # type: int
    def get_internal_type(self): ...
    def formfield(self, **kwargs): ...

class IPAddressField(Field):
    empty_strings_allowed = ...  # type: bool
    description = ...  # type: Any
    system_check_removed_details = ...  # type: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def deconstruct(self): ...
    def get_prep_value(self, value): ...
    def get_internal_type(self): ...

class GenericIPAddressField(Field):
    empty_strings_allowed = ...  # type: bool
    description = ...  # type: Any
    default_error_messages = ...  # type: Any
    unpack_ipv4 = ...  # type: Any
    protocol = ...  # type: Any
    def __init__(self, verbose_name: Optional[Any] = ..., name: Optional[Any] = ..., protocol: str = ..., unpack_ipv4: bool = ..., *args, **kwargs) -> None: ...
    def check(self, **kwargs): ...
    def deconstruct(self): ...
    def get_internal_type(self): ...
    def to_python(self, value): ...
    def get_db_prep_value(self, value, connection, prepared: bool = ...): ...
    def get_prep_value(self, value): ...
    def formfield(self, **kwargs): ...

class NullBooleanField(Field):
    empty_strings_allowed = ...  # type: bool
    default_error_messages = ...  # type: Any
    description = ...  # type: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def deconstruct(self): ...
    def get_internal_type(self): ...
    def to_python(self, value): ...
    def get_prep_lookup(self, lookup_type, value): ...
    def get_prep_value(self, value): ...
    def formfield(self, **kwargs): ...

class PositiveIntegerField(IntegerField):
    description = ...  # type: Any
    def get_internal_type(self): ...
    def formfield(self, **kwargs): ...

class PositiveSmallIntegerField(IntegerField):
    description = ...  # type: Any
    def get_internal_type(self): ...
    def formfield(self, **kwargs): ...

class SlugField(CharField):
    default_validators = ...  # type: Any
    description = ...  # type: Any
    allow_unicode = ...  # type: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def deconstruct(self): ...
    def get_internal_type(self): ...
    def formfield(self, **kwargs): ...

class SmallIntegerField(IntegerField):
    description = ...  # type: Any
    def get_internal_type(self): ...

class TextField(Field):
    description = ...  # type: Any
    def get_internal_type(self): ...
    def to_python(self, value): ...
    def get_prep_value(self, value): ...
    def formfield(self, **kwargs): ...

class TimeField(DateTimeCheckMixin, Field):
    empty_strings_allowed = ...  # type: bool
    default_error_messages = ...  # type: Any
    description = ...  # type: Any
    def __init__(self, verbose_name: Optional[Any] = ..., name: Optional[Any] = ..., auto_now: bool = ..., auto_now_add: bool = ..., **kwargs) -> None: ...
    def deconstruct(self): ...
    def get_internal_type(self): ...
    def to_python(self, value): ...
    def pre_save(self, model_instance, add): ...
    def get_prep_value(self, value): ...
    def get_db_prep_value(self, value, connection, prepared: bool = ...): ...
    def value_to_string(self, obj): ...
    def formfield(self, **kwargs): ...

class URLField(CharField):
    default_validators = ...  # type: Any
    description = ...  # type: Any
    def __init__(self, verbose_name: Optional[Any] = ..., name: Optional[Any] = ..., **kwargs) -> None: ...
    def deconstruct(self): ...
    def formfield(self, **kwargs): ...

class BinaryField(Field):
    description = ...  # type: Any
    empty_values = ...  # type: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def deconstruct(self): ...
    def get_internal_type(self): ...
    def get_default(self): ...
    def get_db_prep_value(self, value, connection, prepared: bool = ...): ...
    def value_to_string(self, obj): ...
    def to_python(self, value): ...

class UUIDField(Field):
    default_error_messages = ...  # type: Any
    description = ...  # type: str
    empty_strings_allowed = ...  # type: bool
    def __init__(self, verbose_name: Optional[Any] = ..., **kwargs) -> None: ...
    def deconstruct(self): ...
    def get_internal_type(self): ...
    def get_db_prep_value(self, value, connection, prepared: bool = ...): ...
    def to_python(self, value): ...
    def formfield(self, **kwargs): ...
