# Stubs for django.db.models.fields.reverse_related (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class ForeignObjectRel:
    auto_created = ...  # type: bool
    concrete = ...  # type: bool
    editable = ...  # type: bool
    is_relation = ...  # type: bool
    null = ...  # type: bool
    field = ...  # type: Any
    model = ...  # type: Any
    related_name = ...  # type: Any
    related_query_name = ...  # type: Any
    limit_choices_to = ...  # type: Any
    parent_link = ...  # type: Any
    on_delete = ...  # type: Any
    symmetrical = ...  # type: bool
    multiple = ...  # type: bool
    def __init__(self, field, to, related_name: Optional[Any] = ..., related_query_name: Optional[Any] = ..., limit_choices_to: Optional[Any] = ..., parent_link: bool = ..., on_delete: Optional[Any] = ...) -> None: ...
    @property
    def to(self): ...
    def hidden(self): ...
    def name(self): ...
    @property
    def remote_field(self): ...
    @property
    def target_field(self): ...
    def related_model(self): ...
    def many_to_many(self): ...
    def many_to_one(self): ...
    def one_to_many(self): ...
    def one_to_one(self): ...
    def get_prep_lookup(self, lookup_name, value): ...
    def get_lookup(self, lookup_name): ...
    def get_internal_type(self): ...
    @property
    def db_type(self): ...
    def get_choices(self, include_blank: bool = ..., blank_choice: Any = ..., limit_to_currently_related: bool = ...): ...
    def get_db_prep_lookup(self, lookup_type, value, connection, prepared: bool = ...): ...
    def is_hidden(self): ...
    def get_joining_columns(self): ...
    def get_extra_restriction(self, where_class, alias, related_alias): ...
    field_name = ...  # type: Any
    def set_field_name(self): ...
    def get_accessor_name(self, model: Optional[Any] = ...): ...
    def get_cache_name(self): ...
    def get_path_info(self): ...

class ManyToOneRel(ForeignObjectRel):
    field_name = ...  # type: Any
    def __init__(self, field, to, field_name, related_name: Optional[Any] = ..., related_query_name: Optional[Any] = ..., limit_choices_to: Optional[Any] = ..., parent_link: bool = ..., on_delete: Optional[Any] = ...) -> None: ...
    def get_related_field(self): ...
    def set_field_name(self): ...

class OneToOneRel(ManyToOneRel):
    multiple = ...  # type: bool
    def __init__(self, field, to, field_name, related_name: Optional[Any] = ..., related_query_name: Optional[Any] = ..., limit_choices_to: Optional[Any] = ..., parent_link: bool = ..., on_delete: Optional[Any] = ...) -> None: ...

class ManyToManyRel(ForeignObjectRel):
    through = ...  # type: Any
    through_fields = ...  # type: Any
    symmetrical = ...  # type: Any
    db_constraint = ...  # type: Any
    def __init__(self, field, to, related_name: Optional[Any] = ..., related_query_name: Optional[Any] = ..., limit_choices_to: Optional[Any] = ..., symmetrical: bool = ..., through: Optional[Any] = ..., through_fields: Optional[Any] = ..., db_constraint: bool = ...) -> None: ...
    def get_related_field(self): ...
