# Stubs for django.views.generic.dates (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from django.utils.translation import ugettext as _
from django.views.generic.base import View
from django.views.generic.detail import BaseDetailView, SingleObjectTemplateResponseMixin
from django.views.generic.list import MultipleObjectMixin, MultipleObjectTemplateResponseMixin

class YearMixin:
    year_format = ...  # type: str
    year = ...  # type: Any
    def get_year_format(self): ...
    def get_year(self): ...
    def get_next_year(self, date): ...
    def get_previous_year(self, date): ...

class MonthMixin:
    month_format = ...  # type: str
    month = ...  # type: Any
    def get_month_format(self): ...
    def get_month(self): ...
    def get_next_month(self, date): ...
    def get_previous_month(self, date): ...

class DayMixin:
    day_format = ...  # type: str
    day = ...  # type: Any
    def get_day_format(self): ...
    def get_day(self): ...
    def get_next_day(self, date): ...
    def get_previous_day(self, date): ...

class WeekMixin:
    week_format = ...  # type: str
    week = ...  # type: Any
    def get_week_format(self): ...
    def get_week(self): ...
    def get_next_week(self, date): ...
    def get_previous_week(self, date): ...

class DateMixin:
    date_field = ...  # type: Any
    allow_future = ...  # type: bool
    def get_date_field(self): ...
    def get_allow_future(self): ...
    def uses_datetime_field(self): ...

class BaseDateListView(MultipleObjectMixin, DateMixin, View):
    allow_empty = ...  # type: bool
    date_list_period = ...  # type: str
    def get(self, request, *args, **kwargs): ...
    def get_dated_items(self): ...
    def get_ordering(self): ...
    def get_dated_queryset(self, **lookup): ...
    def get_date_list_period(self): ...
    def get_date_list(self, queryset, date_type: Optional[Any] = ..., ordering: str = ...): ...

class BaseArchiveIndexView(BaseDateListView):
    context_object_name = ...  # type: str
    def get_dated_items(self): ...

class ArchiveIndexView(MultipleObjectTemplateResponseMixin, BaseArchiveIndexView):
    template_name_suffix = ...  # type: str

class BaseYearArchiveView(YearMixin, BaseDateListView):
    date_list_period = ...  # type: str
    make_object_list = ...  # type: bool
    def get_dated_items(self): ...
    def get_make_object_list(self): ...

class YearArchiveView(MultipleObjectTemplateResponseMixin, BaseYearArchiveView):
    template_name_suffix = ...  # type: str

class BaseMonthArchiveView(YearMixin, MonthMixin, BaseDateListView):
    date_list_period = ...  # type: str
    def get_dated_items(self): ...

class MonthArchiveView(MultipleObjectTemplateResponseMixin, BaseMonthArchiveView):
    template_name_suffix = ...  # type: str

class BaseWeekArchiveView(YearMixin, WeekMixin, BaseDateListView):
    def get_dated_items(self): ...

class WeekArchiveView(MultipleObjectTemplateResponseMixin, BaseWeekArchiveView):
    template_name_suffix = ...  # type: str

class BaseDayArchiveView(YearMixin, MonthMixin, DayMixin, BaseDateListView):
    def get_dated_items(self): ...

class DayArchiveView(MultipleObjectTemplateResponseMixin, BaseDayArchiveView):
    template_name_suffix = ...  # type: str

class BaseTodayArchiveView(BaseDayArchiveView):
    def get_dated_items(self): ...

class TodayArchiveView(MultipleObjectTemplateResponseMixin, BaseTodayArchiveView):
    template_name_suffix = ...  # type: str

class BaseDateDetailView(YearMixin, MonthMixin, DayMixin, DateMixin, BaseDetailView):
    def get_object(self, queryset: Optional[Any] = ...): ...

class DateDetailView(SingleObjectTemplateResponseMixin, BaseDateDetailView):
    template_name_suffix = ...  # type: str

def timezone_today(): ...
