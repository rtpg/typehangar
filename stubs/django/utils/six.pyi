# Stubs for django.utils.six (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
import types

PY2 = ...  # type: Any
PY3 = ...  # type: Any
PY34 = ...  # type: Any
string_types = ...  # type: Any
integer_types = ...  # type: Any
class_types = ...  # type: Any
text_type = ...  # type: Any
binary_type = ...  # type: Any
MAXSIZE = ...  # type: Any

class X:
    def __len__(self): ...

class _LazyDescr:
    name = ...  # type: Any
    def __init__(self, name) -> None: ...
    def __get__(self, obj, tp): ...

class MovedModule(_LazyDescr):
    mod = ...  # type: Any
    def __init__(self, name, old, new: Optional[Any] = ...) -> None: ...
    def __getattr__(self, attr): ...

class _LazyModule(types.ModuleType):
    __doc__ = ...  # type: Any
    def __init__(self, name) -> None: ...
    def __dir__(self): ...

class MovedAttribute(_LazyDescr):
    mod = ...  # type: Any
    attr = ...  # type: Any
    def __init__(self, name, old_mod, new_mod, old_attr: Optional[Any] = ..., new_attr: Optional[Any] = ...) -> None: ...

class _SixMetaPathImporter:
    name = ...  # type: Any
    known_modules = ...  # type: Any
    def __init__(self, six_module_name) -> None: ...
    def find_module(self, fullname, path: Optional[Any] = ...): ...
    def load_module(self, fullname): ...
    def is_package(self, fullname): ...
    def get_code(self, fullname): ...
    get_source = ...  # type: Any

class _MovedItems(_LazyModule):
    __path__ = ...  # type: Any

moves = ...  # type: Any

class Module_six_moves_urllib_parse(_LazyModule): ...
class Module_six_moves_urllib_error(_LazyModule): ...
class Module_six_moves_urllib_request(_LazyModule): ...
class Module_six_moves_urllib_response(_LazyModule): ...
class Module_six_moves_urllib_robotparser(_LazyModule): ...

class Module_six_moves_urllib(types.ModuleType):
    __path__ = ...  # type: Any
    parse = ...  # type: Any
    error = ...  # type: Any
    request = ...  # type: Any
    response = ...  # type: Any
    robotparser = ...  # type: Any
    def __dir__(self): ...

def add_move(move): ...
def remove_move(name): ...

advance_iterator = ...  # type: Any
next = ...  # type: Any
callable = ...  # type: Any

def get_unbound_function(unbound): ...

create_bound_method = ...  # type: Any

def create_unbound_method(func, cls): ...

Iterator = ...  # type: Any

class Iterator:
    def next(self): ...

get_method_function = ...  # type: Any
get_method_self = ...  # type: Any
get_function_closure = ...  # type: Any
get_function_code = ...  # type: Any
get_function_defaults = ...  # type: Any
get_function_globals = ...  # type: Any

def iterkeys(d, **kw): ...
def itervalues(d, **kw): ...
def iteritems(d, **kw): ...
def iterlists(d, **kw): ...

viewkeys = ...  # type: Any
viewvalues = ...  # type: Any
viewitems = ...  # type: Any

def b(s): ...
def u(s): ...

unichr = ...  # type: Any
int2byte = ...  # type: Any
byte2int = ...  # type: Any
indexbytes = ...  # type: Any
iterbytes = ...  # type: Any
StringIO = ...  # type: Any
BytesIO = ...  # type: Any

def assertCountEqual(self, *args, **kwargs): ...
def assertRaisesRegex(self, *args, **kwargs): ...
def assertRegex(self, *args, **kwargs): ...

exec_ = ...  # type: Any

def reraise(tp, value, tb: Optional[Any] = ...): ...
def raise_from(value, from_value): ...

print_ = ...  # type: Any

def wraps(wrapped, assigned: Any = ..., updated: Any = ...): ...

wraps = ...  # type: Any

def with_metaclass(meta, *bases): ...
def add_metaclass(metaclass): ...
def python_2_unicode_compatible(klass): ...

__path__ = ...  # type: Any
__package__ = ...  # type: Any
memoryview = ...  # type: Any
buffer_types = ...  # type: Any
