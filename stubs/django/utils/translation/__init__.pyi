# Stubs for django.utils.translation (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from django.utils.decorators import ContextDecorator

LANGUAGE_SESSION_KEY = ...  # type: str

class TranslatorCommentWarning(SyntaxWarning): ...

class Trans:
    def __getattr__(self, real_name): ...

def gettext_noop(message): ...

ugettext_noop = ...  # type: Any

def gettext(message): ...
def ngettext(singular, plural, number): ...
def ugettext(message): ...
def ungettext(singular, plural, number): ...
def pgettext(context, message): ...
def npgettext(context, singular, plural, number): ...

gettext_lazy = ...  # type: Any
ugettext_lazy = ...  # type: Any
pgettext_lazy = ...  # type: Any

def ngettext_lazy(singular, plural, number: Optional[Any] = ...): ...
def ungettext_lazy(singular, plural, number: Optional[Any] = ...): ...
def npgettext_lazy(context, singular, plural, number: Optional[Any] = ...): ...
def activate(language): ...
def deactivate(): ...

class override(ContextDecorator):
    language = ...  # type: Any
    deactivate = ...  # type: Any
    def __init__(self, language, deactivate: bool = ...) -> None: ...
    old_language = ...  # type: Any
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, traceback): ...

def get_language(): ...
def get_language_bidi(): ...
def check_for_language(lang_code): ...
def to_locale(language): ...
def get_language_from_request(request, check_path: bool = ...): ...
def templatize(src, origin: Optional[Any] = ...): ...
def deactivate_all(): ...

string_concat = ...  # type: Any

def get_language_info(lang_code): ...
