# Stubs for django.utils.functional (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

def curry(_curried_func, *args, **kwargs): ...

class cached_property:
    func = ...  # type: Any
    __doc__ = ...  # type: Any
    name = ...  # type: Any
    def __init__(self, func, name: Optional[Any] = ...) -> None: ...
    def __get__(self, instance, type: Optional[Any] = ...): ...

class Promise: ...

def lazy(func, *resultclasses): ...
def allow_lazy(func, *resultclasses): ...

empty = ...  # type: Any

def new_method_proxy(func): ...

class LazyObject:
    def __init__(self) -> None: ...
    __getattr__ = ...  # type: Any
    def __setattr__(self, name, value): ...
    def __delattr__(self, name): ...
    def __reduce__(self): ...
    def __copy__(self): ...
    def __deepcopy__(self, memo): ...
    __bytes__ = ...  # type: Any
    __bool__ = ...  # type: Any
    __unicode__ = ...  # type: Any
    __nonzero__ = ...  # type: Any
    __dir__ = ...  # type: Any
    __class__ = ...  # type: Any
    __eq__ = ...  # type: Any
    __ne__ = ...  # type: Any
    __hash__ = ...  # type: Any
    __getitem__ = ...  # type: Any
    __setitem__ = ...  # type: Any
    __delitem__ = ...  # type: Any
    __iter__ = ...  # type: Any
    __len__ = ...  # type: Any
    __contains__ = ...  # type: Any

def unpickle_lazyobject(wrapped): ...

class SimpleLazyObject(LazyObject):
    def __init__(self, func) -> None: ...
    def __copy__(self): ...
    def __deepcopy__(self, memo): ...

class lazy_property(property):
    def __new__(cls, fget: Optional[Any] = ..., fset: Optional[Any] = ..., fdel: Optional[Any] = ..., doc: Optional[Any] = ...): ...

def partition(predicate, values): ...
