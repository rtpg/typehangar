# Stubs for django.utils.timezone (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from datetime import tzinfo
from django.utils.decorators import ContextDecorator

class UTC(tzinfo):
    def utcoffset(self, dt): ...
    def tzname(self, dt): ...
    def dst(self, dt): ...

class FixedOffset(tzinfo):
    def __init__(self, offset: Optional[Any] = ..., name: Optional[Any] = ...) -> None: ...
    def utcoffset(self, dt): ...
    def tzname(self, dt): ...
    def dst(self, dt): ...

class ReferenceLocalTimezone(tzinfo):
    STDOFFSET = ...  # type: Any
    DSTOFFSET = ...  # type: Any
    DSTDIFF = ...  # type: Any
    def __init__(self) -> None: ...
    def utcoffset(self, dt): ...
    def dst(self, dt): ...
    def tzname(self, dt): ...

class LocalTimezone(ReferenceLocalTimezone):
    def tzname(self, dt): ...

utc = ...  # type: Any

def get_fixed_timezone(offset): ...
def get_default_timezone(): ...
def get_default_timezone_name(): ...
def get_current_timezone(): ...
def get_current_timezone_name(): ...
def activate(timezone): ...
def deactivate(): ...

class override(ContextDecorator):
    timezone = ...  # type: Any
    def __init__(self, timezone) -> None: ...
    old_timezone = ...  # type: Any
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, traceback): ...

def localtime(value, timezone: Optional[Any] = ...): ...
def now(): ...
def is_aware(value): ...
def is_naive(value): ...
def make_aware(value, timezone: Optional[Any] = ..., is_dst: Optional[Any] = ...): ...
def make_naive(value, timezone: Optional[Any] = ...): ...
