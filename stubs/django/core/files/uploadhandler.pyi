# Stubs for django.core.files.uploadhandler (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class UploadFileException(Exception): ...

class StopUpload(UploadFileException):
    connection_reset = ...  # type: Any
    def __init__(self, connection_reset: bool = ...) -> None: ...

class SkipFile(UploadFileException): ...
class StopFutureHandlers(UploadFileException): ...

class FileUploadHandler:
    chunk_size = ...  # type: Any
    file_name = ...  # type: Any
    content_type = ...  # type: Any
    content_length = ...  # type: Any
    charset = ...  # type: Any
    content_type_extra = ...  # type: Any
    request = ...  # type: Any
    def __init__(self, request: Optional[Any] = ...) -> None: ...
    def handle_raw_input(self, input_data, META, content_length, boundary, encoding: Optional[Any] = ...): ...
    field_name = ...  # type: Any
    def new_file(self, field_name, file_name, content_type, content_length, charset: Optional[Any] = ..., content_type_extra: Optional[Any] = ...): ...
    def receive_data_chunk(self, raw_data, start): ...
    def file_complete(self, file_size): ...
    def upload_complete(self): ...

class TemporaryFileUploadHandler(FileUploadHandler):
    def __init__(self, *args, **kwargs) -> None: ...
    file = ...  # type: Any
    def new_file(self, *args, **kwargs): ...
    def receive_data_chunk(self, raw_data, start): ...
    def file_complete(self, file_size): ...

class MemoryFileUploadHandler(FileUploadHandler):
    activated = ...  # type: bool
    def handle_raw_input(self, input_data, META, content_length, boundary, encoding: Optional[Any] = ...): ...
    file = ...  # type: Any
    def new_file(self, *args, **kwargs): ...
    def receive_data_chunk(self, raw_data, start): ...
    def file_complete(self, file_size): ...

def load_handler(path, *args, **kwargs): ...
