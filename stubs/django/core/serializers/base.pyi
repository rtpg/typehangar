# Stubs for django.core.serializers.base (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
import six

class SerializerDoesNotExist(KeyError): ...
class SerializationError(Exception): ...

class DeserializationError(Exception):
    @classmethod
    def WithData(cls, original_exc, model, fk, field_value): ...

class ProgressBar:
    progress_width = ...  # type: int
    output = ...  # type: Any
    total_count = ...  # type: Any
    prev_done = ...  # type: int
    def __init__(self, output, total_count) -> None: ...
    def update(self, count): ...

class Serializer:
    internal_use_only = ...  # type: bool
    progress_class = ...  # type: Any
    options = ...  # type: Any
    stream = ...  # type: Any
    selected_fields = ...  # type: Any
    use_natural_foreign_keys = ...  # type: Any
    use_natural_primary_keys = ...  # type: Any
    first = ...  # type: bool
    def serialize(self, queryset, **options): ...
    def start_serialization(self): ...
    def end_serialization(self): ...
    def start_object(self, obj): ...
    def end_object(self, obj): ...
    def handle_field(self, obj, field): ...
    def handle_fk_field(self, obj, field): ...
    def handle_m2m_field(self, obj, field): ...
    def getvalue(self): ...

class Deserializer(six.Iterator):
    options = ...  # type: Any
    stream = ...  # type: Any
    def __init__(self, stream_or_string, **options) -> None: ...
    def __iter__(self): ...
    def __next__(self): ...

class DeserializedObject:
    object = ...  # type: Any
    m2m_data = ...  # type: Any
    def __init__(self, obj, m2m_data: Optional[Any] = ...) -> None: ...
    def save(self, save_m2m: bool = ..., using: Optional[Any] = ..., **kwargs): ...

def build_instance(Model, data, db): ...
