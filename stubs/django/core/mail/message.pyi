# Stubs for django.core.mail.message (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from email import charset as Charset, encoders as Encoders
from email.mime.message import MIMEMessage
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

utf8_charset = ...  # type: Any
DEFAULT_ATTACHMENT_MIME_TYPE = ...  # type: str

class BadHeaderError(ValueError): ...

def make_msgid(idstring: Optional[Any] = ..., domain: Optional[Any] = ...): ...

ADDRESS_HEADERS = ...  # type: Any

def forbid_multi_line_headers(name, val, encoding): ...
def sanitize_address(addr, encoding): ...

class MIMEMixin:
    def as_string(self, unixfrom: bool = ..., linesep: str = ...): ...
    as_bytes = ...  # type: Any
    def as_bytes(self, unixfrom: bool = ..., linesep: str = ...): ...

class SafeMIMEMessage(MIMEMixin, MIMEMessage):
    def __setitem__(self, name, val): ...

class SafeMIMEText(MIMEMixin, MIMEText):
    encoding = ...  # type: Any
    def __init__(self, _text, _subtype: str = ..., _charset: Optional[Any] = ...) -> None: ...
    def __setitem__(self, name, val): ...

class SafeMIMEMultipart(MIMEMixin, MIMEMultipart):
    encoding = ...  # type: Any
    def __init__(self, _subtype: str = ..., boundary: Optional[Any] = ..., _subparts: Optional[Any] = ..., encoding: Optional[Any] = ..., **_params) -> None: ...
    def __setitem__(self, name, val): ...

class EmailMessage:
    content_subtype = ...  # type: str
    mixed_subtype = ...  # type: str
    encoding = ...  # type: Any
    to = ...  # type: Any
    cc = ...  # type: Any
    bcc = ...  # type: Any
    reply_to = ...  # type: Any
    from_email = ...  # type: Any
    subject = ...  # type: Any
    body = ...  # type: Any
    attachments = ...  # type: Any
    extra_headers = ...  # type: Any
    connection = ...  # type: Any
    def __init__(self, subject: str = ..., body: str = ..., from_email: Optional[Any] = ..., to: Optional[Any] = ..., bcc: Optional[Any] = ..., connection: Optional[Any] = ..., attachments: Optional[Any] = ..., headers: Optional[Any] = ..., cc: Optional[Any] = ..., reply_to: Optional[Any] = ...) -> None: ...
    def get_connection(self, fail_silently: bool = ...): ...
    def message(self): ...
    def recipients(self): ...
    def send(self, fail_silently: bool = ...): ...
    def attach(self, filename: Optional[Any] = ..., content: Optional[Any] = ..., mimetype: Optional[Any] = ...): ...
    def attach_file(self, path, mimetype: Optional[Any] = ...): ...

class EmailMultiAlternatives(EmailMessage):
    alternative_subtype = ...  # type: str
    alternatives = ...  # type: Any
    def __init__(self, subject: str = ..., body: str = ..., from_email: Optional[Any] = ..., to: Optional[Any] = ..., bcc: Optional[Any] = ..., connection: Optional[Any] = ..., attachments: Optional[Any] = ..., headers: Optional[Any] = ..., alternatives: Optional[Any] = ..., cc: Optional[Any] = ..., reply_to: Optional[Any] = ...) -> None: ...
    def attach_alternative(self, content, mimetype): ...
