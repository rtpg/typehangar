# Stubs for django.test.testcases (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
import unittest
import threading
from django.core.handlers.wsgi import WSGIHandler
from django.core.servers.basehttp import WSGIRequestHandler
from django.test.utils import CaptureQueriesContext

class _AssertNumQueriesContext(CaptureQueriesContext):
    test_case = ...  # type: Any
    num = ...  # type: Any
    def __init__(self, test_case, num, connection) -> None: ...
    def __exit__(self, exc_type, exc_value, traceback): ...

class _AssertTemplateUsedContext:
    test_case = ...  # type: Any
    template_name = ...  # type: Any
    rendered_templates = ...  # type: Any
    rendered_template_names = ...  # type: Any
    context = ...  # type: Any
    def __init__(self, test_case, template_name) -> None: ...
    def on_template_render(self, sender, signal, template, context, **kwargs): ...
    def test(self): ...
    def message(self): ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, traceback): ...

class _AssertTemplateNotUsedContext(_AssertTemplateUsedContext):
    def test(self): ...
    def message(self): ...

class _CursorFailure:
    cls_name = ...  # type: Any
    wrapped = ...  # type: Any
    def __init__(self, cls_name, wrapped) -> None: ...
    def __call__(self): ...

class SimpleTestCase(unittest.TestCase):
    client_class = ...  # type: Any
    allow_database_queries = ...  # type: bool
    @classmethod
    def setUpClass(cls): ...
    @classmethod
    def tearDownClass(cls): ...
    def __call__(self, result: Optional[Any] = ...): ...
    def settings(self, **kwargs): ...
    def modify_settings(self, **kwargs): ...
    def assertRedirects(self, response, expected_url, status_code: int = ..., target_status_code: int = ..., host: Optional[Any] = ..., msg_prefix: str = ..., fetch_redirect_response: bool = ...): ...
    def assertContains(self, response, text, count: Optional[Any] = ..., status_code: int = ..., msg_prefix: str = ..., html: bool = ...): ...
    def assertNotContains(self, response, text, status_code: int = ..., msg_prefix: str = ..., html: bool = ...): ...
    def assertFormError(self, response, form, field, errors, msg_prefix: str = ...): ...
    def assertFormsetError(self, response, formset, form_index, field, errors, msg_prefix: str = ...): ...
    def assertTemplateUsed(self, response: Optional[Any] = ..., template_name: Optional[Any] = ..., msg_prefix: str = ..., count: Optional[Any] = ...): ...
    def assertTemplateNotUsed(self, response: Optional[Any] = ..., template_name: Optional[Any] = ..., msg_prefix: str = ...): ...
    def assertRaisesMessage(self, expected_exception, expected_message, *args, **kwargs): ...
    def assertFieldOutput(self, fieldclass, valid, invalid, field_args: Optional[Any] = ..., field_kwargs: Optional[Any] = ..., empty_value: str = ...): ...
    def assertHTMLEqual(self, html1, html2, msg: Optional[Any] = ...): ...
    def assertHTMLNotEqual(self, html1, html2, msg: Optional[Any] = ...): ...
    def assertInHTML(self, needle, haystack, count: Optional[Any] = ..., msg_prefix: str = ...): ...
    def assertJSONEqual(self, raw, expected_data, msg: Optional[Any] = ...): ...
    def assertJSONNotEqual(self, raw, expected_data, msg: Optional[Any] = ...): ...
    def assertXMLEqual(self, xml1, xml2, msg: Optional[Any] = ...): ...
    def assertXMLNotEqual(self, xml1, xml2, msg: Optional[Any] = ...): ...

class TransactionTestCase(SimpleTestCase):
    reset_sequences = ...  # type: bool
    available_apps = ...  # type: Any
    fixtures = ...  # type: Any
    serialized_rollback = ...  # type: bool
    allow_database_queries = ...  # type: bool
    def assertQuerysetEqual(self, qs, values, transform: Any = ..., ordered: bool = ..., msg: Optional[Any] = ...): ...
    def assertNumQueries(self, num, func: Optional[Any] = ..., *args, **kwargs): ...

class TestCase(TransactionTestCase):
    @classmethod
    def setUpClass(cls): ...
    @classmethod
    def tearDownClass(cls): ...
    @classmethod
    def setUpTestData(cls): ...

class CheckCondition:
    cond_func = ...  # type: Any
    def __init__(self, cond_func) -> None: ...
    def __get__(self, obj, objtype): ...

def skipIfDBFeature(*features): ...
def skipUnlessDBFeature(*features): ...

class QuietWSGIRequestHandler(WSGIRequestHandler):
    def log_message(*args): ...

class FSFilesHandler(WSGIHandler):
    application = ...  # type: Any
    base_url = ...  # type: Any
    def __init__(self, application) -> None: ...
    def file_path(self, url): ...
    def get_response(self, request): ...
    def serve(self, request): ...
    def __call__(self, environ, start_response): ...

class _StaticFilesHandler(FSFilesHandler):
    def get_base_dir(self): ...
    def get_base_url(self): ...

class _MediaFilesHandler(FSFilesHandler):
    def get_base_dir(self): ...
    def get_base_url(self): ...

class LiveServerThread(threading.Thread):
    host = ...  # type: Any
    port = ...  # type: Any
    possible_ports = ...  # type: Any
    is_ready = ...  # type: Any
    error = ...  # type: Any
    static_handler = ...  # type: Any
    connections_override = ...  # type: Any
    def __init__(self, host, possible_ports, static_handler, connections_override: Optional[Any] = ...) -> None: ...
    httpd = ...  # type: Any
    def run(self): ...
    def terminate(self): ...

class LiveServerTestCase(TransactionTestCase):
    static_handler = ...  # type: Any
    def live_server_url(cls): ...
    @classmethod
    def setUpClass(cls): ...
    @classmethod
    def tearDownClass(cls): ...

class SerializeMixin:
    lockfile = ...  # type: Any
    @classmethod
    def setUpClass(cls): ...
    @classmethod
    def tearDownClass(cls): ...
