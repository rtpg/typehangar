# Stubs for django.test.utils (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from django.utils.decorators import ContextDecorator

class Approximate:
    val = ...  # type: Any
    places = ...  # type: Any
    def __init__(self, val, places: int = ...) -> None: ...
    def __eq__(self, other): ...

class ContextList(list):
    def __getitem__(self, key): ...
    def __contains__(self, key): ...
    def keys(self): ...

def setup_test_environment(): ...
def teardown_test_environment(): ...
def get_runner(settings, test_runner_class: Optional[Any] = ...): ...

class override_settings:
    options = ...  # type: Any
    def __init__(self, **kwargs) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, traceback): ...
    def __call__(self, test_func): ...
    def save_options(self, test_func): ...
    wrapped = ...  # type: Any
    def enable(self): ...
    def disable(self): ...

class modify_settings(override_settings):
    operations = ...  # type: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def save_options(self, test_func): ...
    options = ...  # type: Any
    def enable(self): ...

class CaptureQueriesContext:
    connection = ...  # type: Any
    def __init__(self, connection) -> None: ...
    def __iter__(self): ...
    def __getitem__(self, index): ...
    def __len__(self): ...
    @property
    def captured_queries(self): ...
    force_debug_cursor = ...  # type: Any
    initial_queries = ...  # type: Any
    final_queries = ...  # type: Any
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, traceback): ...

class ignore_warnings:
    ignore_kwargs = ...  # type: Any
    filter_func = ...  # type: Any
    def __init__(self, **kwargs) -> None: ...
    catch_warnings = ...  # type: Any
    def __call__(self, decorated): ...

requires_tz_support = ...  # type: Any

def isolate_lru_cache(lru_cache_object): ...

class ScriptPrefix(ContextDecorator):
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_val, traceback): ...
    prefix = ...  # type: Any
    old_prefix = ...  # type: Any
    def __init__(self, prefix) -> None: ...

class LoggingCaptureMixin:
    logger = ...  # type: Any
    old_stream = ...  # type: Any
    logger_output = ...  # type: Any
    def setUp(self): ...
    def tearDown(self): ...
