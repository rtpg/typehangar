# Stubs for django.template.defaulttags (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from itertools import cycle as itertools_cycle
from .base import BLOCK_TAG_END as BLOCK_TAG_END, BLOCK_TAG_START as BLOCK_TAG_START, COMMENT_TAG_END as COMMENT_TAG_END, COMMENT_TAG_START as COMMENT_TAG_START, SINGLE_BRACE_END as SINGLE_BRACE_END, SINGLE_BRACE_START as SINGLE_BRACE_START, VARIABLE_ATTRIBUTE_SEPARATOR as VARIABLE_ATTRIBUTE_SEPARATOR, VARIABLE_TAG_END as VARIABLE_TAG_END, VARIABLE_TAG_START as VARIABLE_TAG_START, Context as Context, Node as Node, NodeList as NodeList, Template as Template, TemplateSyntaxError as TemplateSyntaxError, VariableDoesNotExist as VariableDoesNotExist, kwarg_re as kwarg_re, render_value_in_context as render_value_in_context, token_kwargs as token_kwargs
from .defaultfilters import date as date
from .library import Library as Library
from .smartif import IfParser as IfParser, Literal as Literal

register = ...  # type: Any

class AutoEscapeControlNode(Node):
    def __init__(self, setting, nodelist) -> None: ...
    def render(self, context): ...

class CommentNode(Node):
    def render(self, context): ...

class CsrfTokenNode(Node):
    def render(self, context): ...

class CycleNode(Node):
    cyclevars = ...  # type: Any
    variable_name = ...  # type: Any
    silent = ...  # type: Any
    def __init__(self, cyclevars, variable_name: Optional[Any] = ..., silent: bool = ...) -> None: ...
    def render(self, context): ...

class DebugNode(Node):
    def render(self, context): ...

class FilterNode(Node):
    def __init__(self, filter_expr, nodelist) -> None: ...
    def render(self, context): ...

class FirstOfNode(Node):
    vars = ...  # type: Any
    asvar = ...  # type: Any
    def __init__(self, variables, asvar: Optional[Any] = ...) -> None: ...
    def render(self, context): ...

class ForNode(Node):
    child_nodelists = ...  # type: Any
    is_reversed = ...  # type: Any
    nodelist_loop = ...  # type: Any
    nodelist_empty = ...  # type: Any
    def __init__(self, loopvars, sequence, is_reversed, nodelist_loop, nodelist_empty: Optional[Any] = ...) -> None: ...
    def __iter__(self): ...
    def render(self, context): ...

class IfChangedNode(Node):
    child_nodelists = ...  # type: Any
    def __init__(self, nodelist_true, nodelist_false, *varlist) -> None: ...
    def render(self, context): ...

class IfEqualNode(Node):
    child_nodelists = ...  # type: Any
    negate = ...  # type: Any
    def __init__(self, var1, var2, nodelist_true, nodelist_false, negate) -> None: ...
    def render(self, context): ...

class IfNode(Node):
    conditions_nodelists = ...  # type: Any
    def __init__(self, conditions_nodelists) -> None: ...
    def __iter__(self): ...
    @property
    def nodelist(self): ...
    def render(self, context): ...

class LoremNode(Node):
    def __init__(self, count, method, common) -> None: ...
    def render(self, context): ...

class RegroupNode(Node):
    var_name = ...  # type: Any
    def __init__(self, target, expression, var_name) -> None: ...
    def resolve_expression(self, obj, context): ...
    def render(self, context): ...

def include_is_allowed(filepath, allowed_include_roots): ...

class SsiNode(Node):
    filepath = ...  # type: Any
    parsed = ...  # type: Any
    def __init__(self, filepath, parsed) -> None: ...
    def render(self, context): ...

class LoadNode(Node):
    def render(self, context): ...

class NowNode(Node):
    format_string = ...  # type: Any
    asvar = ...  # type: Any
    def __init__(self, format_string, asvar: Optional[Any] = ...) -> None: ...
    def render(self, context): ...

class SpacelessNode(Node):
    nodelist = ...  # type: Any
    def __init__(self, nodelist) -> None: ...
    def render(self, context): ...

class TemplateTagNode(Node):
    mapping = ...  # type: Any
    tagtype = ...  # type: Any
    def __init__(self, tagtype) -> None: ...
    def render(self, context): ...

class URLNode(Node):
    view_name = ...  # type: Any
    args = ...  # type: Any
    kwargs = ...  # type: Any
    asvar = ...  # type: Any
    def __init__(self, view_name, args, kwargs, asvar) -> None: ...
    def render(self, context): ...

class VerbatimNode(Node):
    content = ...  # type: Any
    def __init__(self, content) -> None: ...
    def render(self, context): ...

class WidthRatioNode(Node):
    val_expr = ...  # type: Any
    max_expr = ...  # type: Any
    max_width = ...  # type: Any
    asvar = ...  # type: Any
    def __init__(self, val_expr, max_expr, max_width, asvar: Optional[Any] = ...) -> None: ...
    def render(self, context): ...

class WithNode(Node):
    nodelist = ...  # type: Any
    extra_context = ...  # type: Any
    def __init__(self, var, name, nodelist, extra_context: Optional[Any] = ...) -> None: ...
    def render(self, context): ...

def autoescape(parser, token): ...
def comment(parser, token): ...
def cycle(parser, token): ...
def csrf_token(parser, token): ...
def debug(parser, token): ...
def do_filter(parser, token): ...
def firstof(parser, token): ...
def do_for(parser, token): ...
def do_ifequal(parser, token, negate): ...
def ifequal(parser, token): ...
def ifnotequal(parser, token): ...

class TemplateLiteral(Literal):
    value = ...  # type: Any
    text = ...  # type: Any
    def __init__(self, value, text) -> None: ...
    def display(self): ...
    def eval(self, context): ...

class TemplateIfParser(IfParser):
    error_class = ...  # type: Any
    template_parser = ...  # type: Any
    def __init__(self, parser, *args, **kwargs) -> None: ...
    def create_var(self, value): ...

def do_if(parser, token): ...
def ifchanged(parser, token): ...
def ssi(parser, token): ...
def find_library(parser, name): ...
def load_from_library(library, label, names): ...
def load(parser, token): ...
def lorem(parser, token): ...
def now(parser, token): ...
def regroup(parser, token): ...
def spaceless(parser, token): ...
def templatetag(parser, token): ...
def url(parser, token): ...
def verbatim(parser, token): ...
def widthratio(parser, token): ...
def do_with(parser, token): ...
