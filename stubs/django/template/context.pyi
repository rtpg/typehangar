# Stubs for django.template.context (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class ContextPopException(Exception): ...

class ContextDict(dict):
    context = ...  # type: Any
    def __init__(self, context, *args, **kwargs) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args, **kwargs): ...

class BaseContext:
    def __init__(self, dict_: Optional[Any] = ...) -> None: ...
    def __copy__(self): ...
    def __iter__(self): ...
    def push(self, *args, **kwargs): ...
    def pop(self): ...
    def __setitem__(self, key, value): ...
    def __getitem__(self, key): ...
    def __delitem__(self, key): ...
    def has_key(self, key): ...
    def __contains__(self, key): ...
    def get(self, key, otherwise: Optional[Any] = ...): ...
    def setdefault(self, key, default: Optional[Any] = ...): ...
    def new(self, values: Optional[Any] = ...): ...
    def flatten(self): ...
    def __eq__(self, other): ...

class Context(BaseContext):
    autoescape = ...  # type: Any
    use_l10n = ...  # type: Any
    use_tz = ...  # type: Any
    template_name = ...  # type: str
    render_context = ...  # type: Any
    template = ...  # type: Any
    def __init__(self, dict_: Optional[Any] = ..., autoescape: bool = ..., current_app: Any = ..., use_l10n: Optional[Any] = ..., use_tz: Optional[Any] = ...) -> None: ...
    @property
    def current_app(self): ...
    @property
    def is_current_app_set(self): ...
    def bind_template(self, template): ...
    def __copy__(self): ...
    def update(self, other_dict): ...

class RenderContext(BaseContext):
    def __iter__(self): ...
    def has_key(self, key): ...
    def get(self, key, otherwise: Optional[Any] = ...): ...
    def __getitem__(self, key): ...

class RequestContext(Context):
    request = ...  # type: Any
    def __init__(self, request, dict_: Optional[Any] = ..., processors: Optional[Any] = ..., current_app: Any = ..., use_l10n: Optional[Any] = ..., use_tz: Optional[Any] = ...) -> None: ...
    template = ...  # type: Any
    def bind_template(self, template): ...
    def new(self, values: Optional[Any] = ...): ...

def make_context(context, request: Optional[Any] = ...): ...
