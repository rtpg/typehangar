# Stubs for django.template.engine (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from .base import Context as Context, Template as Template
from .context import _builtin_context_processors as _builtin_context_processors
from .exceptions import TemplateDoesNotExist as TemplateDoesNotExist
from .library import import_library as import_library

class Engine:
    default_builtins = ...  # type: Any
    dirs = ...  # type: Any
    app_dirs = ...  # type: Any
    allowed_include_roots = ...  # type: Any
    context_processors = ...  # type: Any
    debug = ...  # type: Any
    loaders = ...  # type: Any
    string_if_invalid = ...  # type: Any
    file_charset = ...  # type: Any
    libraries = ...  # type: Any
    template_libraries = ...  # type: Any
    builtins = ...  # type: Any
    template_builtins = ...  # type: Any
    def __init__(self, dirs: Optional[Any] = ..., app_dirs: bool = ..., allowed_include_roots: Optional[Any] = ..., context_processors: Optional[Any] = ..., debug: bool = ..., loaders: Optional[Any] = ..., string_if_invalid: str = ..., file_charset: str = ..., libraries: Optional[Any] = ..., builtins: Optional[Any] = ...) -> None: ...
    @staticmethod
    def get_default(): ...
    def template_context_processors(self): ...
    def get_template_builtins(self, builtins): ...
    def get_template_libraries(self, libraries): ...
    def template_loaders(self): ...
    def get_template_loaders(self, template_loaders): ...
    def find_template_loader(self, loader): ...
    def find_template(self, name, dirs: Optional[Any] = ..., skip: Optional[Any] = ...): ...
    def from_string(self, template_code): ...
    def get_template(self, template_name, dirs: Any = ...): ...
    def render_to_string(self, template_name, context: Optional[Any] = ..., context_instance: Any = ..., dirs: Any = ..., dictionary: Any = ...): ...
    def select_template(self, template_name_list, dirs: Any = ...): ...
