# Stubs for django.template.defaultfilters (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from django.utils.html import urlize as _urlize
from django.utils.text import slugify as _slugify
from .base import Variable as Variable, VariableDoesNotExist as VariableDoesNotExist
from .library import Library as Library

register = ...  # type: Any

def stringfilter(func): ...
def addslashes(value): ...
def capfirst(value): ...
def escapejs_filter(value): ...

pos_inf = ...  # type: Any
neg_inf = ...  # type: Any
nan = ...  # type: Any
special_floats = ...  # type: Any

def floatformat(text, arg: int = ...): ...
def iriencode(value): ...
def linenumbers(value, autoescape: bool = ...): ...
def lower(value): ...
def make_list(value): ...
def slugify(value): ...
def stringformat(value, arg): ...
def title(value): ...
def truncatechars(value, arg): ...
def truncatechars_html(value, arg): ...
def truncatewords(value, arg): ...
def truncatewords_html(value, arg): ...
def upper(value): ...
def urlencode(value, safe: Optional[Any] = ...): ...
def urlize(value, autoescape: bool = ...): ...
def urlizetrunc(value, limit, autoescape: bool = ...): ...
def wordcount(value): ...
def wordwrap(value, arg): ...
def ljust(value, arg): ...
def rjust(value, arg): ...
def center(value, arg): ...
def cut(value, arg): ...
def escape_filter(value): ...
def force_escape(value): ...
def linebreaks_filter(value, autoescape: bool = ...): ...
def linebreaksbr(value, autoescape: bool = ...): ...
def safe(value): ...
def safeseq(value): ...
def removetags(value, tags): ...
def striptags(value): ...
def dictsort(value, arg): ...
def dictsortreversed(value, arg): ...
def first(value): ...
def join(value, arg, autoescape: bool = ...): ...
def last(value): ...
def length(value): ...
def length_is(value, arg): ...
def random(value): ...
def slice_filter(value, arg): ...
def unordered_list(value, autoescape: bool = ...): ...
def add(value, arg): ...
def get_digit(value, arg): ...
def date(value, arg: Optional[Any] = ...): ...
def time(value, arg: Optional[Any] = ...): ...
def timesince_filter(value, arg: Optional[Any] = ...): ...
def timeuntil_filter(value, arg: Optional[Any] = ...): ...
def default(value, arg): ...
def default_if_none(value, arg): ...
def divisibleby(value, arg): ...
def yesno(value, arg: Optional[Any] = ...): ...
def filesizeformat(bytes): ...
def pluralize(value, arg: str = ...): ...
def phone2numeric_filter(value): ...
def pprint(value): ...
