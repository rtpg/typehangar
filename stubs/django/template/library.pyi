# Stubs for django.template.library (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from .base import Node as Node, Template as Template, token_kwargs as token_kwargs
from .exceptions import TemplateSyntaxError as TemplateSyntaxError

class InvalidTemplateLibrary(Exception): ...

class Library:
    filters = ...  # type: Any
    tags = ...  # type: Any
    def __init__(self) -> None: ...
    def tag(self, name: Optional[Any] = ..., compile_function: Optional[Any] = ...): ...
    def tag_function(self, func): ...
    def filter(self, name: Optional[Any] = ..., filter_func: Optional[Any] = ..., **flags): ...
    def filter_function(self, func, **flags): ...
    def simple_tag(self, func: Optional[Any] = ..., takes_context: Optional[Any] = ..., name: Optional[Any] = ...): ...
    def assignment_tag(self, func: Optional[Any] = ..., takes_context: Optional[Any] = ..., name: Optional[Any] = ...): ...
    def inclusion_tag(self, filename, func: Optional[Any] = ..., takes_context: Optional[Any] = ..., name: Optional[Any] = ...): ...

class TagHelperNode(Node):
    func = ...  # type: Any
    takes_context = ...  # type: Any
    args = ...  # type: Any
    kwargs = ...  # type: Any
    def __init__(self, func, takes_context, args, kwargs) -> None: ...
    def get_resolved_arguments(self, context): ...

class SimpleNode(TagHelperNode):
    target_var = ...  # type: Any
    def __init__(self, func, takes_context, args, kwargs, target_var) -> None: ...
    def render(self, context): ...

class InclusionNode(TagHelperNode):
    filename = ...  # type: Any
    def __init__(self, func, takes_context, args, kwargs, filename) -> None: ...
    def render(self, context): ...

def parse_bits(parser, bits, params, varargs, varkw, defaults, takes_context, name): ...
def import_library(name): ...
